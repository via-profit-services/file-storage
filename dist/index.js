/*!
 * 
 *  Via Profit Services / Settings Manager
 * 
 *  Repository https://gitlab.com/via-profit-services/file-storage
 *  Contact    promo@via-profit.ru
 *  Website    https://via-profit.ru
 *       
 */
module.exports=function(e){var i={};function t(n){if(i[n])return i[n].exports;var a=i[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,t),a.l=!0,a.exports}return t.m=e,t.c=i,t.d=function(e,i,n){t.o(e,i)||Object.defineProperty(e,i,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,i){if(1&i&&(e=t(e)),8&i)return e;if(4&i&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&i&&"string"!=typeof e)for(var a in e)t.d(n,a,function(i){return e[i]}.bind(null,a));return n},t.n=function(e){var i=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(i,"a",i),i},t.o=function(e,i){return Object.prototype.hasOwnProperty.call(e,i)},t.p="",t(t.s=10)}([function(e,i){e.exports=require("@via-profit-services/core")},function(e,i,t){"use strict";var n=this&&this.__awaiter||function(e,i,t,n){return new(t||(t=Promise))((function(a,r){function o(e){try{d(n.next(e))}catch(e){r(e)}}function l(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof t?i:new t((function(e){e(i)}))).then(o,l)}d((n=n.apply(e,i||[])).next())}))},a=this&&this.__rest||function(e,i){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&i.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(n=Object.getOwnPropertySymbols(e);a<n.length;a++)i.indexOf(n[a])<0&&Object.prototype.propertyIsEnumerable.call(e,n[a])&&(t[n[a]]=e[n[a]])}return t},r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var i={};if(null!=e)for(var t in e)Object.hasOwnProperty.call(e,t)&&(i[t]=e[t]);return i.default=e,i},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const l=r(t(21)),d=o(t(7)),u=t(0),s=o(t(22)),m=o(t(23)),c=o(t(24)),p=o(t(25)),f=o(t(5)),y=o(t(26)),v=o(t(27)),g=o(t(28)),k=t(29),N=t(9),h=t(2),T=t(4),F=t(6);class S{constructor(e){this.props=e}clearCache(){return n(this,void 0,void 0,(function*(){const{cacheAbsolutePath:e,rootPath:i}=h.getParams(),{redis:t,logger:n}=this.props.context;e!==i&&l.default.existsSync(e)&&(yield t.del(N.REDIS_CACHE_NAME),g.default(e+"/*",e=>{e&&n.fileStorage.error("Failed to remove cache directory",{err:e})}),n.fileStorage.info(`Cache was cleared in «${e}»`))}))}clearTemporary(){return n(this,void 0,void 0,(function*(){const{logger:e}=this.props.context,{temporaryAbsolutePath:i,rootPath:t}=h.getParams();i!==t&&l.default.existsSync(i)&&(g.default(i+"/*",i=>{i&&e.fileStorage.error("Failed to remove cache directory",{err:i})}),e.fileStorage.info(`Cache was cleared in «${i}»`))}))}checkFileInCache(e){return n(this,void 0,void 0,(function*(){const{redis:i}=this.props.context;return yield i.hget(N.REDIS_CACHE_NAME,e)}))}saveImageIntoTheCache(e,i){return n(this,void 0,void 0,(function*(){const{redis:t}=this.props.context,{payload:n,token:a}=e,{cacheAbsolutePath:r}=h.getParams(),o=S.getPathFromUuid(k.v4()),u=d.default.join(r,o),s=`${u}.${n.ext}`,m=d.default.dirname(u);l.default.existsSync(m)||l.default.mkdirSync(m,{recursive:!0}),l.default.writeFileSync(s,i),yield t.hset(N.REDIS_CACHE_NAME,a,s)}))}getUrlWithTransform(e,i){return n(this,void 0,void 0,(function*(){const{redis:t,logger:n}=this.props.context,{hostname:a,cacheDelimiter:r,staticPrefix:o,cacheAbsolutePath:s,storageAbsolutePath:m}=h.getParams(),{url:c,id:p,mimeType:f,isLocalFile:y}=e,v=S.getExtensionByMimeType(f),g={id:p,ext:v,mimeType:f,transform:i};if(!y)return c;const T=Buffer.from(JSON.stringify(g),"utf8").toString("base64"),F=yield t.hget(N.REDIS_CACHE_NAME,T);if(F)return[`${a}${o}`,r,""+F].join("/");const _=`${S.getPathFromUuid(p)}.${v}`,I=`${S.getPathFromUuid(k.v4())}.${v}`,D=d.default.join(m,_),b=d.default.join(s,I),x=d.default.dirname(b);if(!l.default.existsSync(D))throw new u.ServerError(`File ${_} with id ${p} not exists`);l.default.existsSync(x)||l.default.mkdirSync(x,{recursive:!0}),l.default.copyFile(D,b,()=>{t.hset(N.REDIS_CACHE_NAME,T,I)});try{this.applyTransform(b,i),n.fileStorage.debug(`Apply transformation to file ${I} from ${_}`,{transform:i})}catch(e){n.fileStorage.error("Failed to apply transformation with file "+I,{err:e})}return[`${a}${o}`,r,""+I].join("/")}))}static getPathFromUuid(e){return[e.substr(0,2),e.substr(2,2),e].join("/")}static resolveFile(e){const{mimeType:i,isLocalFile:t,url:n,id:a}=e;if(!t)return{resolveAbsolutePath:n,resolvePath:n};const{storagePath:r,storageAbsolutePath:o}=h.getParams(),l=F.FileStorage.getExtensionByMimeType(i),u=F.FileStorage.getPathFromUuid(a);return{resolvePath:d.default.join(r,`${u}.${l}`),resolveAbsolutePath:d.default.join(o,`${u}.${l}`)}}applyTransform(e,i){return n(this,void 0,void 0,(function*(){let t=yield f.default.read(e);Object.entries(i).forEach(([e,i])=>{if("resize"===e){const{width:e,height:n}=i;t=t.resize(e,n)}if("cover"===e){const{width:e,height:n}=i;t=t.cover(e,n)}if("contain"===e){const{width:e,height:n}=i;t=t.contain(e,n)}if("scaleToFit"===e){const{width:e,height:n}=i;t=t.scaleToFit(e,n)}if("gaussian"===e){const e=i;t=t.gaussian(e)}if("blur"===e){const e=i;t=t.gaussian(e)}if("greyscale"===e){!0===i&&(t=t.grayscale())}}),yield t.writeAsync(e)}))}static getFilenameFromUuid(e){const{storagePath:i}=h.getParams(),t=S.getPathFromUuid(e);return d.default.join("/",i,t)}static getStoragePath(){const{storagePath:e,storageAbsolutePath:i}=h.getParams();return{storagePath:e,storageAbsolutePath:i}}static getCachePath(){const{cachePath:e,cacheAbsolutePath:i}=h.getParams();return{cachePath:e,cacheAbsolutePath:i}}static getFileTypeByMimeType(e){switch(e){case"image/tiff":case"image/png":case"image/jpeg":case"image/gif":case"image/svg":return T.FileType.image;default:return T.FileType.document}}static getExtensionByMimeType(e){return y.default.extension(e)||"txt"}static getMimeTypeByExtension(e){return y.default.lookup(e)||"text/plain"}static extractExtensionFromFilename(e){return e.split(".").pop()}static getMimeTypeByFilename(e){const i=S.extractExtensionFromFilename(e);return S.getMimeTypeByExtension(i)}getFiles(e){return n(this,void 0,void 0,(function*(){const{context:i}=this.props,{knex:t}=i,{staticPrefix:n,hostname:r,staticDelimiter:o}=h.getParams(),{limit:l,offset:d,orderBy:s,where:m}=e,c=yield t.select(["*",t.raw('count(*) over() as "totalCount"')]).orderBy(u.convertOrderByToKnex(s)).from("fileStorage").limit(l||1).offset(d||0).where(e=>u.convertWhereToKnex(e,m)).orderBy(u.convertOrderByToKnex(s)).then(e=>({totalCount:e.length?Number(e[0].totalCount):0,nodes:e.map(e=>{var{totalCount:i,url:t}=e,l=a(e,["totalCount","url"]);return Object.assign(Object.assign({},l),{url:l.isLocalFile?`${r}${n}/${o}/${t}`:t})})})),{totalCount:p,nodes:f}=c;return{totalCount:p,nodes:f,where:m,orderBy:s,limit:l,offset:d}}))}getFilesByIds(e){return n(this,void 0,void 0,(function*(){const{nodes:i}=yield this.getFiles({where:[["id",u.TWhereAction.IN,e]],offset:0,limit:e.length});return i}))}getFile(e){return n(this,void 0,void 0,(function*(){const i=yield this.getFilesByIds([e]);return!!i.length&&i[0]}))}updateFile(e,i){return n(this,void 0,void 0,(function*(){const{knex:t,timezone:n}=this.props.context;yield t("fileStorage").update(Object.assign(Object.assign({},i),{updatedAt:v.default.tz(n).format()})).where("id",e)}))}createTemporaryFile(e,i,t){return n(this,void 0,void 0,(function*(){const{logger:n}=this.props.context,a=i.id||k.v4(),{temporaryAbsolutePath:r,hostname:o,temporaryDelimiter:s,staticPrefix:m}=h.getParams(),c=S.getExtensionByMimeType(i.mimeType),p=`${S.getPathFromUuid(a)}.${c}`,f=d.default.join(r,p),y=d.default.dirname(f);return new Promise(i=>{l.default.existsSync(y)||l.default.mkdirSync(y,{recursive:!0});const r=`${o}${m}/${s}/${p}`;e instanceof l.ReadStream&&e.pipe(l.default.createWriteStream(f)),e.on("close",()=>{u.CronJobManager.addJob(`${N.CRON_JOB_DELETE_FILE_NAME}${a}`,{cronTime:`* */${t||N.CRON_JOB_DELETE_FILE_DEFAULTMIN} * * * *`,start:!0,onTick:()=>{try{l.default.unlink(f,()=>{n.fileStorage.info(`Temporary file ${a} was removed successfully`)})}catch(e){n.fileStorage.error("Failed to remove Temporary file "+a,{err:e})}}}),i({id:a,absoluteFilename:f,url:r})})})}))}getTemporaryFileStream(e,i){return n(this,void 0,void 0,(function*(){const{logger:t}=this.props.context,n=e.id||k.v4(),{temporaryAbsolutePath:a,hostname:r,temporaryDelimiter:o,staticPrefix:s}=h.getParams(),m=S.getExtensionByMimeType(e.mimeType),c=`${S.getPathFromUuid(n)}.${m}`,p=d.default.join(a,c),f=d.default.dirname(p);return new Promise(e=>{l.default.existsSync(f)||l.default.mkdirSync(f,{recursive:!0});const a=`${r}${s}/${o}/${c}`,d=l.default.createWriteStream(p);d.on("close",()=>{u.CronJobManager.addJob(`${N.CRON_JOB_DELETE_FILE_NAME}${n}`,{cronTime:`* */${i||N.CRON_JOB_DELETE_FILE_DEFAULTMIN} * * * *`,start:!0,onTick:()=>{try{l.default.unlink(p,()=>{t.fileStorage.info(`Temporary file ${n} was removed successfully`)})}catch(e){t.fileStorage.error("Failed to remove Temporary file "+n,{err:e})}}}),e({url:a,fileStream:d})})})}))}createFile(e,i,t){return n(this,void 0,void 0,(function*(){const{knex:n,timezone:a}=this.props.context,{storageAbsolutePath:r,compressionOptions:o}=h.getParams(),y=i.id||k.v4(),g=S.getExtensionByMimeType(i.mimeType),N=`${S.getPathFromUuid(y)}.${g}`,T=i.url||N,F=(yield n("fileStorage").insert(Object.assign(Object.assign({isLocalFile:!0,id:y,url:T,type:S.getFileTypeByMimeType(i.mimeType)},i),{createdAt:v.default.tz(a).format(),updatedAt:v.default.tz(a).format()})).returning("id"))[0];if(!F)throw new u.ServerError("Failed to register file in Database");const _=d.default.join(r,N),I=d.default.dirname(_);return new Promise(n=>{l.default.existsSync(I)||l.default.mkdirSync(I,{recursive:!0}),e.pipe(l.default.createWriteStream(_)).on("close",()=>{if(["image/png","image/jpeg"].includes(i.mimeType)){const{imageOptimMaxWidth:e,imageOptimMaxHeight:i}=h.getParams();f.default.read(_).then(t=>t.scaleToFit(e,i)).then(e=>e.writeAsync(_)).then(()=>{t||s.default([_],{plugins:[m.default(o.mozJpeg),p.default(o.pngQuant),c.default(o.optiPng)]}).then(e=>{const{data:i}=e[0];l.default.writeFileSync(_,i)})}).then(()=>n({id:F,absoluteFilename:_}))}else n({id:F,absoluteFilename:_})})})}))}deleteFiles(e){return n(this,void 0,void 0,(function*(){const{knex:i}=this.props.context,t=yield this.getFilesByIds(e);return t.length&&t.forEach(e=>{if(e.isLocalFile||e.url.match(/^\/[a-z0-9]+/i)){const i=S.getFilenameFromUuid(e.id),t=d.default.resolve(i),n=d.default.dirname(i),a=d.default.resolve(n,"..");try{l.default.existsSync(t)&&l.default.unlinkSync(t),l.default.readdirSync(n).length&&l.default.unlinkSync(n),l.default.readdirSync(a).length&&l.default.unlinkSync(a)}catch(i){throw new u.ServerError(`\n              Failed to delete file ${e.id} in path ${t}`,{err:i})}}}),yield i("fileStorage").del().whereIn("id",e).returning("id")}))}}i.FileStorageService=S,i.default=S},function(e,i,t){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=n(t(7)),r=a.default.resolve(a.default.dirname(process.argv[1])),o={params:{storagePath:"./public/fileStorage/files",cachePath:"./public/fileStorage/cache",temporaryPath:"./public/fileStorage/temp",staticPrefix:"/static",hostname:"http://localhost:80",staticPrefixAbsolutePath:"",storageAbsolutePath:"",cacheAbsolutePath:"",temporaryAbsolutePath:"",rootPath:r,imageOptimMaxWidth:800,imageOptimMaxHeight:600,staticDelimiter:"s",cacheDelimiter:"c",temporaryDelimiter:"t",compressionOptions:{mozJpeg:{quality:70},pngQuant:{quality:[.8,.8]},optiPng:{optimizationLevel:3}}}};i.setParams=e=>{o.params=Object.assign(Object.assign({},o.params),e),o.params=Object.assign(Object.assign({},o.params),{staticPrefixAbsolutePath:a.default.resolve(r,o.params.staticPrefix),storageAbsolutePath:a.default.resolve(r,o.params.storagePath),cacheAbsolutePath:a.default.resolve(r,o.params.cachePath),temporaryAbsolutePath:a.default.resolve(r,o.params.temporaryPath)})},i.getParams=()=>o.params,i.default=o},function(e,i,t){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=t(0),r=n(t(1)),o={files:null};i.default=function(e){if(null!==o.files)return o;const i=new r.default({context:e});return o.files=new a.DataLoader(e=>i.getFilesByIds(e).then(i=>a.collateForDataloader(e,i))),o}},function(e,i,t){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),function(e){e.image="image",e.document="document"}(i.FileType||(i.FileType={}))},function(e,i){e.exports=require("jimp")},function(e,i,t){"use strict";function n(e){for(var t in e)i.hasOwnProperty(t)||(i[t]=e[t])}var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=a(t(12));i.makeSchema=r.default;const o=a(t(1));i.FileStorage=o.default,n(t(4)),n(t(34))},function(e,i){e.exports=require("path")},function(e,i,t){"use strict";Object.defineProperty(i,"__esModule",{value:!0});i.default=class{constructor(){this.promise=new Promise((e,i)=>{this.resolve=i=>{this.file=i,e(i)},this.reject=i}),this.promise.catch(()=>{})}}},function(e,i,t){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const n=t(0);i.LOG_MAZ_FILES=n.LOG_MAZ_FILES,i.LOG_MAZ_SIZE=n.LOG_MAZ_SIZE,i.LOG_DATE_PATTERNT=n.LOG_DATE_PATTERNT,i.LOG_FILENAME_DEBUG=n.LOG_FILENAME_DEBUG,i.LOG_FILENAME_ERRORS=n.LOG_FILENAME_ERRORS,i.CRON_JOB_DELETE_FILE_NAME="fileStorageDeleteFile",i.CRON_JOB_DELETE_FILE_DEFAULTMIN=30,i.CRON_JOB_CLEAR_CACHE_NAME="fileStorageClearCache",i.REDIS_CACHE_NAME="fileStorageCache",i.LOG_FILENAME_FILES_STORAGE="file-storage-%DATE%.log"},function(e,i,t){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),function(e){for(var t in e)i.hasOwnProperty(t)||(i[t]=e[t])}(t(11))},function(e,i,t){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=n(t(5));i.Jimp=a.default,function(e){for(var t in e)i.hasOwnProperty(t)||(i[t]=e[t])}(t(6))},function(e,i,t){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var i={};if(null!=e)for(var t in e)Object.hasOwnProperty.call(e,t)&&(i[t]=e[t]);return i.default=e,i};Object.defineProperty(i,"__esModule",{value:!0});const r=n(t(13)),o=t(2),l=n(t(17)),d=a(t(33));i.makeSchema=e=>{o.setParams(e);const i=r.default(o.getParams());return{typeDefs:d,resolvers:l.default,expressMiddleware:i}},i.default=i.makeSchema},function(e,i,t){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=t(0),r=t(2),o=n(t(14));i.default=e=>i=>{const t=i.context,{staticPrefix:n}=e,{logger:l,endpoint:d}=t,{storageAbsolutePath:u,staticDelimiter:s,cacheAbsolutePath:m,cacheDelimiter:c,temporaryAbsolutePath:p,temporaryDelimiter:f}=r.getParams(),y=a.Express.Router();return y.use(d,o.default({context:t})),y.use(`${n}/${s}`,a.Express.static(u)),l.fileStorage.info(`Registered static directory in «${u}» with static prefix «${n}»`),y.use(`${n}/${c}`,a.Express.static(m)),l.fileStorage.info(`Registered static cache directory in «${m}»`),y.use(`${n}/${f}`,a.Express.static(p)),l.fileStorage.info(`Registered static temporary directory in «${p}»`),y}},function(e,i,t){"use strict";var n=this&&this.__awaiter||function(e,i,t,n){return new(t||(t=Promise))((function(a,r){function o(e){try{d(n.next(e))}catch(e){r(e)}}function l(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof t?i:new t((function(e){e(i)}))).then(o,l)}d((n=n.apply(e,i||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=t(0),o=a(t(15)),l=t(16),d=a(t(8));i.default=e=>{const{context:i,limits:t}=e,{logger:a}=i;return(e,i,u)=>n(void 0,void 0,void 0,(function*(){if(!e.is("multipart/form-data"))return void u();const n=new Promise(i=>e.on("end",i)),{send:s}=i;i.send=(...e)=>{n.then(()=>{i.send=s,i.send(...e)})};const m={maxFieldSize:64e6,maxFileSize:1/0,maxFiles:1/0},c=new o.default({headers:e.headers,limits:Object.assign(Object.assign({fields:2},m),t)}),p=new Map;let f=null;c.on("field",(i,n,o,l)=>{if(l)throw a.fileStorage.error(`The ‘${i}’ multipart field value exceeds the ${t.maxFieldSize} byte size limit.`),new r.ServerError(`The ‘${i}’ multipart field value exceeds the ${t.maxFieldSize} byte size limit.`);if("operations"===i)try{f=JSON.parse(n)}catch(e){throw a.fileStorage.error("Invalid JSON in the «operations» multipart field"),new r.ServerError("Invalid JSON in the «operations» multipart field")}if("map"===i){try{const e=JSON.parse(n);Object.entries(e).forEach(([e])=>{p.set(Number(e),new d.default)})}catch(e){throw a.fileStorage.error("Invalid JSON in the «map» field"),new r.ServerError("Invalid JSON in the «map» field")}try{f.variables.files=f.variables.files.map((e,i)=>{const t=p.get(i);if(!t)throw a.fileStorage.error(`Can't assing file with index «${i}»`),new r.ServerError(`Can't assing file with index «${i}»`);return t})}catch(e){throw a.fileStorage.error("Can't assing file from variables",{err:e}),new r.ServerError("Can't assing file from variables")}e.body=f,u()}}),c.on("file",(e,i,n,o,d)=>{const u=p.get(Number(e));if(!u)throw a.fileStorage.error(`File from field «${e}» are not registered in map field`),new r.ServerError(`File from field «${e}» are not registered in map field`);const s=new l.WriteStream;s.on("error",()=>{i.unpipe(),i.resume()}),i.on("limit",()=>{throw a.fileStorage.error(`File truncated as it exceeds the ${t.maxFileSize} byte size limit.`),new r.ServerError(`File truncated as it exceeds the ${t.maxFileSize} byte size limit.`)}),i.on("error",e=>{i.unpipe(),s.destroy(new r.ServerError("Upload error",{error:e}))});const m={filename:n,mimeType:d,encoding:o,capacitor:s,createReadStream:e=>s.createReadStream(e)};Object.defineProperty(m,"capacitor",{value:s}),i.pipe(s),u.resolve(m)}),c.once("filesLimit",()=>{throw a.fileStorage.error(t.maxFiles+" max file uploads exceeded."),new r.ServerError(t.maxFiles+" max file uploads exceeded.")}),c.once("finish",()=>{if(e.unpipe(c),e.resume(),null===f)throw a.fileStorage.error("Missing multipart field «operations»"),new r.ServerError("Missing multipart field «operations»");if(!p.size)throw a.fileStorage.error("Missing multipart field «map»"),new r.ServerError("Missing multipart field «map»")}),c.once("error",e=>{throw a.fileStorage.error("Unknown error",e),new r.ServerError("Unknown error",e)}),e.pipe(c)}))}},function(e,i){e.exports=require("busboy")},function(e,i){e.exports=require("fs-capacitor")},function(e,i,t){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=n(t(18)),r=n(t(20)),o=n(t(30)),l=n(t(31)),d=n(t(32)),u={Query:{fileStorage:()=>({})},Mutation:{fileStorage:()=>({})},FileStorageQuery:{list:l.default,image:(e,i)=>i},FileStorageMutation:{delete:r.default,upload:d.default},File:o.default,Image:o.default,FileUpload:a.default};i.default=u},function(e,i,t){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=t(19),r=n(t(8)),o=new a.GraphQLScalarType({name:"FileUpload",description:"The `Upload` scalar type represents a file upload.",parseValue(e){if(e instanceof r.default)return e.promise;throw new a.GraphQLError("Upload value invalid")},parseLiteral(e){throw new a.GraphQLError("Upload literal unsupported",e)},serialize(){throw new a.GraphQLError("Upload serialization unsupported")}});i.default=o},function(e,i){e.exports=require("graphql")},function(e,i,t){"use strict";var n=this&&this.__awaiter||function(e,i,t,n){return new(t||(t=Promise))((function(a,r){function o(e){try{d(n.next(e))}catch(e){r(e)}}function l(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof t?i:new t((function(e){e(i)}))).then(o,l)}d((n=n.apply(e,i||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=t(0),o=a(t(3)),l=a(t(1));i.default=(e,i,t)=>n(void 0,void 0,void 0,(function*(){const{ids:e}=i,{logger:n,token:a}=t,{uuid:d}=a,u=new l.default({context:t}),s=o.default(t);try{const i=yield u.deleteFiles(e);return i.forEach(e=>{s.files.clear(e),n.fileStorage.debug(`File ${e} was deleted. Initiator: Account ${d}`)}),i.length!==e.length&&n.fileStorage.debug("Not all files were deleted, because some of them were not found in the database"),!0}catch(e){throw n.fileStorage.error("Failed to Delete files",{err:e,uuid:d}),new r.ServerError("Failed to Delete files",{err:e,uuid:d})}}))},function(e,i){e.exports=require("fs")},function(e,i){e.exports=require("imagemin")},function(e,i){e.exports=require("imagemin-mozjpeg")},function(e,i){e.exports=require("imagemin-optipng")},function(e,i){e.exports=require("imagemin-pngquant")},function(e,i){e.exports=require("mime-types")},function(e,i){e.exports=require("moment-timezone")},function(e,i){e.exports=require("rimraf")},function(e,i){e.exports=require("uuid")},function(e,i,t){"use strict";var n=this&&this.__awaiter||function(e,i,t,n){return new(t||(t=Promise))((function(a,r){function o(e){try{d(n.next(e))}catch(e){r(e)}}function l(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof t?i:new t((function(e){e(i)}))).then(o,l)}d((n=n.apply(e,i||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=t(0),o=a(t(3)),l=a(t(1)),d=t(4),u=new Proxy({id:()=>({}),createdAt:()=>({}),updatedAt:()=>({}),owner:()=>({}),category:()=>({}),mimeType:()=>({}),url:()=>({}),type:()=>({}),description:()=>({}),metaData:()=>({})},{get:(e,i)=>(e,t,a)=>n(void 0,void 0,void 0,(function*(){const{id:t,transform:n}=e,u=new l.default({context:a}),s=o.default(a),m=yield s.files.load(t);if(!m)throw new r.ServerError(`File with id ${t} not found`,{id:t});return m.type===d.FileType.image&&"url"===i&&n?u.getUrlWithTransform(m,n):m[i]}))});i.default=u},function(e,i,t){"use strict";var n=this&&this.__awaiter||function(e,i,t,n){return new(t||(t=Promise))((function(a,r){function o(e){try{d(n.next(e))}catch(e){r(e)}}function l(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof t?i:new t((function(e){e(i)}))).then(o,l)}d((n=n.apply(e,i||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=t(0),o=a(t(3)),l=a(t(1));i.default=(e,i,t)=>n(void 0,void 0,void 0,(function*(){const{transform:e}=i,{logger:n}=t,a=r.buildQueryFilter(i),d=new l.default({context:t}),u=o.default(t);try{const i=yield d.getFiles(a),t=r.buildCursorConnection(i,"files");return u.files.clearAll(),e&&(t.edges=t.edges.map(({node:i,cursor:t})=>({cursor:t,node:Object.assign(Object.assign({},i),{transform:e})}))),i.nodes.forEach(e=>{u.files.prime(e.id,e)}),t}catch(e){throw n.fileStorage.error("Failed to get Files list",{err:e}),new r.ServerError("Failed to get Files list",{err:e})}}))},function(e,i,t){"use strict";var n=this&&this.__awaiter||function(e,i,t,n){return new(t||(t=Promise))((function(a,r){function o(e){try{d(n.next(e))}catch(e){r(e)}}function l(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof t?i:new t((function(e){e(i)}))).then(o,l)}d((n=n.apply(e,i||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=a(t(1));i.default=(e,i,t)=>n(void 0,void 0,void 0,(function*(){const{files:e,info:a,noCompress:o}=i,{logger:l,token:d}=t,{uuid:u}=d,s=new r.default({context:t}),m=(yield Promise.all(e)).map((e,i)=>n(void 0,void 0,void 0,(function*(){const{createReadStream:t,mimeType:n,filename:r}=e,d=yield s.createFile(t(),Object.assign({mimeType:n},a[i]),o);return l.fileStorage.info(`File «${r}» uploaded successfully as «${d.absoluteFilename}»`,{uuid:u,mimeType:n}),{id:d.id}})));return Promise.all(m)}))},function(e,i){var t={kind:"Document",definitions:[{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"fileStorage"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileStorageQuery"}}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Mutation"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"fileStorage"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileStorageMutation"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"FileStorageMutation"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",description:{kind:"StringValue",value:"Delete files by IDs",block:!0},name:{kind:"Name",value:"delete"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"ids"},type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}}}},directives:[]}],type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},directives:[]},{kind:"FieldDefinition",description:{kind:"StringValue",value:"Upload files",block:!0},name:{kind:"Name",value:"upload"},arguments:[{kind:"InputValueDefinition",description:{kind:"StringValue",value:'Array of files\nFor example `curl` request will be:\ncurl localhost:3001/graphql \\\n-F operations=\'{ "query": "mutation($files: [FileUpload!]! $info: [FileUploadInfo!]!) { multipleUpload(files: $files info: $info) { id url } }", "variables": { "files": [null, null] }, "info": [{"owner": "xxxx-xxx-xxx", "category": "other"}, {"owner": "xxxx-xxx-xxx", "category": "other"}] }\' \\\n-F map=\'{ "0": ["variables.files.0"], "1": ["variables.files.1"] }\' \\\n-F 0=@b.txt \\\n-F 1=@c.txt',block:!0},name:{kind:"Name",value:"files"},type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileUpload"}}}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"info"},type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileUploadInfo"}}}}},directives:[]},{kind:"InputValueDefinition",description:{kind:"StringValue",value:"Only for images.\nIf true, the image will not be compressed",block:!0},name:{kind:"Name",value:"noCompress"},type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},directives:[]}],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"File"}}}},directives:[]}]},{kind:"InputObjectTypeDefinition",description:{kind:"StringValue",value:"Information about uploaded file",block:!0},name:{kind:"Name",value:"FileUploadInfo"},directives:[],fields:[{kind:"InputValueDefinition",description:{kind:"StringValue",value:"Your file owner",block:!0},name:{kind:"Name",value:"owner"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"InputValueDefinition",description:{kind:"StringValue",value:"Voluntary name of category",block:!0},name:{kind:"Name",value:"category"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"InputValueDefinition",description:{kind:"StringValue",value:"Description of this file",block:!0},name:{kind:"Name",value:"description"},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"InputValueDefinition",description:{kind:"StringValue",value:"Voluntary metadata of this file (e.g. title, alt for images)",block:!0},name:{kind:"Name",value:"metaData"},type:{kind:"NamedType",name:{kind:"Name",value:"JSON"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"FileStorageQuery"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",description:{kind:"StringValue",value:"Returns Drivers list bundle",block:!0},name:{kind:"Name",value:"list"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"first"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"offset"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"after"},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"orderBy"},type:{kind:"ListType",type:{kind:"NamedType",name:{kind:"Name",value:"FilesOrderBy"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"filter"},type:{kind:"NamedType",name:{kind:"Name",value:"FilesListFilter"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"transform"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInput"}},directives:[]}],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FilesListConnection"}}},directives:[]},{kind:"FieldDefinition",description:{kind:"StringValue",value:"Returns single image",block:!0},name:{kind:"Name",value:"image"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"id"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"transform"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInput"}},directives:[]}],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Image"}}},directives:[]},{kind:"FieldDefinition",description:{kind:"StringValue",value:"Returns single file",block:!0},name:{kind:"Name",value:"file"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"id"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]}],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"File"}}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"FilesListFilter"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"owner"},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"category"},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"mimeType"},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeDefinition",description:{kind:"StringValue",value:"File adge bundle",block:!0},name:{kind:"Name",value:"FilesEdge"},interfaces:[{kind:"NamedType",name:{kind:"Name",value:"Edge"}}],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"node"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"File"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"cursor"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"InputObjectTypeDefinition",description:{kind:"StringValue",value:"Possible data to order list of files",block:!0},name:{kind:"Name",value:"FilesOrderBy"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"field"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FilesOrderField"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"direction"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"OrderDirection"}}},directives:[]}]},{kind:"EnumTypeDefinition",description:{kind:"StringValue",value:"Possible data to sort of files list",block:!0},name:{kind:"Name",value:"FilesOrderField"},directives:[],values:[{kind:"EnumValueDefinition",name:{kind:"Name",value:"category"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"mimeType"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"createdAt"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"updatedAt"},directives:[]}]},{kind:"EnumTypeDefinition",name:{kind:"Name",value:"FileType"},directives:[],values:[{kind:"EnumValueDefinition",name:{kind:"Name",value:"image"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"document"},directives:[]}]},{kind:"ObjectTypeDefinition",description:{kind:"StringValue",value:"Files list connection",block:!0},name:{kind:"Name",value:"FilesListConnection"},interfaces:[{kind:"NamedType",name:{kind:"Name",value:"Connection"}}],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"totalCount"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"pageInfo"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"PageInfo"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"edges"},arguments:[],type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NamedType",name:{kind:"Name",value:"FilesEdge"}}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"File"},interfaces:[{kind:"NamedType",name:{kind:"Name",value:"Node"}}],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"createdAt"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"DateTime"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"updatedAt"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"DateTime"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"owner"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"type"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileType"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"category"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"mimeType"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"url"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"description"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"metaData"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"JSON"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Image"},interfaces:[{kind:"NamedType",name:{kind:"Name",value:"Node"}}],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"createdAt"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"DateTime"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"updatedAt"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"DateTime"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"owner"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"type"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileType"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"category"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"mimeType"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"url"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"description"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"metaData"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"JSON"}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"ImageTransformInput"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"resize"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInputResize"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"cover"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInputCover"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"contain"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInputContain"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"scaleToFit"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInputScaleToFit"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"gaussian"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"blur"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"quality"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"greyscale"},type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"ImageTransformInputResize"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"width"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"height"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"ImageTransformInputCover"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"width"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"height"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"ImageTransformInputContain"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"width"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"height"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"ImageTransformInputScaleToFit"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"width"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"height"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]}]},{kind:"ScalarTypeDefinition",description:{kind:"StringValue",value:"A GraphQL `FileUpload` scalar as specified GraphQL multipart request specification: https://github.com/jaydenseric/graphql-multipart-request-spec#graphql-multipart-request-specification",block:!0},name:{kind:"Name",value:"FileUpload"},directives:[]}],loc:{start:0,end:3419}};t.loc.source={body:'\nextend type Query {\n  fileStorage: FileStorageQuery!\n}\n\nextend type Mutation {\n  fileStorage: FileStorageMutation!\n}\n\ntype FileStorageMutation {\n  """\n  Delete files by IDs\n  """\n  delete(ids: [ID!]!): Boolean\n  \n  """\n  Upload files\n  """\n  upload(\n    """\n    Array of files\n    For example `curl` request will be:\n    curl localhost:3001/graphql \\\n    -F operations=\'{ "query": "mutation($files: [FileUpload!]! $info: [FileUploadInfo!]!) { multipleUpload(files: $files info: $info) { id url } }", "variables": { "files": [null, null] }, "info": [{"owner": "xxxx-xxx-xxx", "category": "other"}, {"owner": "xxxx-xxx-xxx", "category": "other"}] }\' \\\n    -F map=\'{ "0": ["variables.files.0"], "1": ["variables.files.1"] }\' \\\n    -F 0=@b.txt \\\n    -F 1=@c.txt\n    """\n    files: [FileUpload!]!\n    info: [FileUploadInfo!]!\n    \n    """\n    Only for images.\n    If true, the image will not be compressed\n    """\n    noCompress: Boolean\n  ): [File!]\n}\n\n"""\nInformation about uploaded file\n"""\ninput FileUploadInfo {\n\n  """\n  Your file owner\n  """\n  owner: ID!\n\n  """\n  Voluntary name of category\n  """\n  category: String!\n\n  """\n  Description of this file\n  """\n  description: String\n\n  """\n  Voluntary metadata of this file (e.g. title, alt for images)\n  """\n  metaData: JSON\n}\n\ntype FileStorageQuery {\n  """\n  Returns Drivers list bundle\n  """\n  list(\n    first: Int\n    offset: Int\n    after: String\n    orderBy: [FilesOrderBy]\n    filter: FilesListFilter\n    transform: ImageTransformInput\n  ): FilesListConnection!\n\n  """\n  Returns single image\n  """\n  image(id: ID! transform: ImageTransformInput): Image!\n  \n  """\n  Returns single file\n  """\n  file(id: ID!): File!\n}\n\n\ninput FilesListFilter {\n  owner: ID\n  category: String\n  mimeType: String\n}\n\n"""\nFile adge bundle\n"""\ntype FilesEdge implements Edge {\n  node: File!\n  cursor: String!\n}\n\n"""\nPossible data to order list of files\n"""\ninput FilesOrderBy {\n  field: FilesOrderField!\n  direction: OrderDirection!\n}\n\n\n"""\nPossible data to sort of files list\n"""\nenum FilesOrderField {\n  category\n  mimeType\n  createdAt\n  updatedAt\n}\n\nenum FileType {\n  image\n  document\n}\n\n"""\nFiles list connection\n"""\ntype FilesListConnection implements Connection {\n  totalCount: Int!\n  pageInfo: PageInfo!\n  edges: [FilesEdge]!\n}\n\n\ntype File implements Node {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  owner: ID!\n  type: FileType!\n  category: String!\n  mimeType: String!\n  url: String!\n  description: String\n  metaData: JSON\n}\n\ntype Image implements Node {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  owner: ID!\n  type: FileType!\n  category: String!\n  mimeType: String!\n  url: String!\n  description: String\n  metaData: JSON\n}\n\ninput ImageTransformInput {\n  resize: ImageTransformInputResize\n  cover: ImageTransformInputCover\n  contain: ImageTransformInputContain\n  scaleToFit: ImageTransformInputScaleToFit\n  gaussian: Int\n  blur: Int\n  quality: Int\n  greyscale: Boolean\n}\n\ninput ImageTransformInputResize {\n  width: Int!\n  height: Int!\n}\n\ninput ImageTransformInputCover {\n  width: Int!\n  height: Int!\n}\n\ninput ImageTransformInputContain {\n  width: Int!\n  height: Int!\n}\n\ninput ImageTransformInputScaleToFit {\n  width: Int!\n  height: Int!\n}\n\n"""\nA GraphQL `FileUpload` scalar as specified GraphQL multipart request specification: https://github.com/jaydenseric/graphql-multipart-request-spec#graphql-multipart-request-specification\n"""\nscalar FileUpload',name:"GraphQL request",locationOffset:{line:1,column:1}};e.exports=t},function(e,i,t){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const n=t(35);t(36);const a=t(9),r=n.format.combine(n.format.metadata(),n.format.json(),n.format.timestamp({format:"YYYY-MM-DDTHH:mm:ssZZ"}),n.format.splat(),n.format.printf(e=>{const{timestamp:i,level:t,message:n,metadata:a}=e,r="{}"!==JSON.stringify(a)?a:null;return`${i} ${t}: ${n} ${r?JSON.stringify(r):""}`}));i.configureFileStorageLogger=e=>{const{logDir:i,logFilenamePattern:t}=e,o=t||a.LOG_FILENAME_FILES_STORAGE;return n.createLogger({level:"debug",format:r,transports:[new n.transports.DailyRotateFile({filename:`${i}/${o}`,level:"info",datePattern:a.LOG_DATE_PATTERNT,zippedArchive:!0,maxSize:a.LOG_MAZ_SIZE,maxFiles:a.LOG_MAZ_FILES}),new n.transports.DailyRotateFile({filename:`${i}/${a.LOG_FILENAME_ERRORS}`,level:"error",datePattern:a.LOG_DATE_PATTERNT,zippedArchive:!0,maxSize:a.LOG_MAZ_SIZE,maxFiles:a.LOG_MAZ_FILES}),new n.transports.DailyRotateFile({filename:`${i}/${a.LOG_FILENAME_DEBUG}`,level:"debug",datePattern:a.LOG_DATE_PATTERNT,zippedArchive:!0,maxSize:a.LOG_MAZ_SIZE,maxFiles:a.LOG_MAZ_FILES})]})},i.default=i.configureFileStorageLogger},function(e,i){e.exports=require("winston")},function(e,i){e.exports=require("winston-daily-rotate-file")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,