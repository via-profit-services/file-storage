/*!
 * 
 *  Via Profit Services / Settings Manager
 * 
 *  Repository https://gitlab.com/via-profit-services/file-storage
 *  Contact    promo@via-profit.ru
 *  Website    https://via-profit.ru
 *       
 */
module.exports=function(e){var i={};function n(t){if(i[t])return i[t].exports;var a=i[t]={i:t,l:!1,exports:{}};return e[t].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=i,n.d=function(e,i,t){n.o(e,i)||Object.defineProperty(e,i,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,i){if(1&i&&(e=n(e)),8&i)return e;if(4&i&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&i&&"string"!=typeof e)for(var a in e)n.d(t,a,function(i){return e[i]}.bind(null,a));return t},n.n=function(e){var i=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(i,"a",i),i},n.o=function(e,i){return Object.prototype.hasOwnProperty.call(e,i)},n.p="",n(n.s=9)}([function(e,i){e.exports=require("@via-profit-services/core")},function(e,i,n){"use strict";var t=this&&this.__awaiter||function(e,i,n,t){return new(n||(n=Promise))((function(a,r){function l(e){try{d(t.next(e))}catch(e){r(e)}}function o(e){try{d(t.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof n?i:new n((function(e){e(i)}))).then(l,o)}d((t=t.apply(e,i||[])).next())}))},a=this&&this.__rest||function(e,i){var n={};for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&i.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(t=Object.getOwnPropertySymbols(e);a<t.length;a++)i.indexOf(t[a])<0&&Object.prototype.propertyIsEnumerable.call(e,t[a])&&(n[t[a]]=e[t[a]])}return n},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const l=r(n(23)),o=r(n(6)),d=n(0),u=r(n(24)),s=r(n(25)),m=r(n(26)),p=r(n(27)),c=r(n(5)),f=r(n(28)),y=r(n(29)),v=r(n(30)),k=n(31),g=n(8),N=n(2),h=n(4);class T{constructor(e){this.props=e}clearCache(){return t(this,void 0,void 0,(function*(){const{cacheAbsolutePath:e,rootPath:i}=N.getParams(),{redis:n,logger:t}=this.props.context;e!==i&&l.default.existsSync(e)&&(yield n.del(g.REDIS_CACHE_NAME),v.default(e+"/*",e=>{e&&t.fileStorage.error("Failed to remove cache directory",{err:e})}),t.fileStorage.info(`Cache was cleared in «${e}»`))}))}checkFileInCache(e){return t(this,void 0,void 0,(function*(){const{redis:i}=this.props.context;return yield i.hget(g.REDIS_CACHE_NAME,e)}))}saveImageIntoTheCache(e,i){return t(this,void 0,void 0,(function*(){const{redis:n}=this.props.context,{payload:t,token:a}=e,{cacheAbsolutePath:r}=N.getParams(),d=T.getPathFromUuid(k.v4()),u=o.default.join(r,d),s=`${u}.${t.ext}`,m=o.default.dirname(u);l.default.existsSync(m)||l.default.mkdirSync(m,{recursive:!0}),l.default.writeFileSync(s,i),yield n.hset(g.REDIS_CACHE_NAME,a,s)}))}getUrlWithTransform(e,i){return t(this,void 0,void 0,(function*(){const{redis:n}=this.props.context,{hostname:t,cacheDelimiter:a,staticPrefix:r,cacheAbsolutePath:d,storageAbsolutePath:u}=N.getParams(),{url:s,id:m,mimeType:p,isLocalFile:c}=e,f=T.getExtensionByMimeType(p),y={id:m,ext:f,mimeType:p,transform:i};c||(y.url=s);const v=Buffer.from(JSON.stringify(y),"utf8").toString("base64"),h=yield n.hget(g.REDIS_CACHE_NAME,v);if(h)return[`${t}${r}`,a,""+h].join("/");const F=`${T.getPathFromUuid(m)}.${f}`,I=`${T.getPathFromUuid(k.v4())}.${f}`,S=o.default.join(u,F),D=o.default.join(d,I),_=o.default.dirname(D);return l.default.existsSync(_)||l.default.mkdirSync(_,{recursive:!0}),this.applyTransform(S,D,i),yield n.hset(g.REDIS_CACHE_NAME,v,I),[`${t}${r}`,a,""+I].join("/")}))}static getPathFromUuid(e){return[e.substr(0,2),e.substr(2,2),e.substr(4)].join("/")}applyTransform(e,i,n){return t(this,void 0,void 0,(function*(){let t=yield c.default.read(e);Object.entries(n).forEach(([e,i])=>{if("resize"===e){const{width:e,height:n}=i;t=t.resize(e,n)}if("cover"===e){const{width:e,height:n}=i;t=t.cover(e,n)}if("contain"===e){const{width:e,height:n}=i;t=t.contain(e,n)}if("scaleToFit"===e){const{width:e,height:n}=i;t=t.scaleToFit(e,n)}if("gaussian"===e){const e=i;t=t.gaussian(e)}if("blur"===e){const e=i;t=t.gaussian(e)}if("greyscale"===e){!0===i&&(t=t.grayscale())}}),yield t.writeAsync(i)}))}static getFilenameFromUuid(e){const{storagePath:i}=N.getParams(),n=T.getPathFromUuid(e);return o.default.join("/",i,n)}static getFileTypeByMimeType(e){switch(e){case"image/tiff":case"image/png":case"image/jpeg":case"image/gif":case"image/svg":return h.FileType.image;default:return h.FileType.document}}static getExtensionByMimeType(e){return f.default.extension(e)||"txt"}static getMimeTypeByExtension(e){return f.default.lookup(e)||"text/plain"}static extractExtensionFromFilename(e){return e.split(".").pop()}static getMimeTypeByFilename(e){const i=T.extractExtensionFromFilename(e);return T.getMimeTypeByExtension(i)}getFiles(e){return t(this,void 0,void 0,(function*(){const{context:i}=this.props,{knex:n}=i,{staticPrefix:t,hostname:r,staticDelimiter:l}=N.getParams(),{limit:o,offset:u,orderBy:s,where:m}=e,p=yield n.select(["*",n.raw('count(*) over() as "totalCount"')]).orderBy(d.convertOrderByToKnex(s)).from("fileStorage").limit(o||1).offset(u||0).where(e=>d.convertWhereToKnex(e,m)).orderBy(d.convertOrderByToKnex(s)).then(e=>({totalCount:e.length?Number(e[0].totalCount):0,nodes:e.map(e=>{var{totalCount:i,url:n}=e,o=a(e,["totalCount","url"]);return Object.assign(Object.assign({},o),{url:o.isLocalFile?`${r}${t}/${l}/${n}`:n})})})),{totalCount:c,nodes:f}=p;return{totalCount:c,nodes:f,where:m,orderBy:s,limit:o,offset:u}}))}getFilesByIds(e){return t(this,void 0,void 0,(function*(){const{nodes:i}=yield this.getFiles({where:[["id",d.TWhereAction.IN,e]],offset:0,limit:e.length});return i}))}getDriver(e){return t(this,void 0,void 0,(function*(){const i=yield this.getFilesByIds([e]);return!!i.length&&i[0]}))}updateFile(e,i){return t(this,void 0,void 0,(function*(){const{knex:n,timezone:t}=this.props.context;yield n("fileStorage").update(Object.assign(Object.assign({},i),{updatedAt:y.default.tz(t).format()})).where("id",e)}))}createFile(e,i,n){return t(this,void 0,void 0,(function*(){const{knex:t,timezone:a}=this.props.context,{storageAbsolutePath:r,compressionOptions:f}=N.getParams(),v=i.id||k.v4(),g=T.getExtensionByMimeType(i.mimeType),h=`${T.getPathFromUuid(v)}.${g}`,F=i.url||h,I=(yield t("fileStorage").insert(Object.assign(Object.assign({isLocalFile:!0,id:v,url:F,type:T.getFileTypeByMimeType(i.mimeType)},i),{createdAt:y.default.tz(a).format(),updatedAt:y.default.tz(a).format()})).returning("id"))[0];if(!I)throw new d.ServerError("Failed to register file in Database");const S=o.default.join(r,h),D=o.default.dirname(S);return new Promise(t=>{l.default.existsSync(D)||l.default.mkdirSync(D,{recursive:!0}),e.pipe(l.default.createWriteStream(S)).on("close",()=>{if(["image/png","image/jpeg"].includes(i.mimeType)){const{imageOptimMaxWidth:e,imageOptimMaxHeight:i}=N.getParams();c.default.read(S).then(n=>n.scaleToFit(e,i)).then(e=>e.writeAsync(S)).then(()=>{n||u.default([S],{plugins:[s.default(f.mozJpeg),p.default(f.pngQuant),m.default(f.optiPng)]}).then(e=>{const{data:i}=e[0];l.default.writeFileSync(S,i)})}).then(()=>t({id:I,absoluteFilename:S}))}else t({id:I,absoluteFilename:S})})})}))}deleteFiles(e){return t(this,void 0,void 0,(function*(){const{knex:i}=this.props.context,n=yield this.getFilesByIds(e);return n.length&&n.forEach(e=>{if(e.isLocalFile||e.url.match(/^\/[a-z0-9]+/i)){const i=T.getFilenameFromUuid(e.id),n=o.default.resolve(i),t=o.default.dirname(i),a=o.default.resolve(t,"..");try{l.default.existsSync(n)&&l.default.unlinkSync(n),l.default.readdirSync(t).length&&l.default.unlinkSync(t),l.default.readdirSync(a).length&&l.default.unlinkSync(a)}catch(i){throw new d.ServerError(`\n              Failed to delete file ${e.id} in path ${n}`,{err:i})}}}),yield i("fileStorage").del().whereIn("id",e).returning("id")}))}}i.FileStorageService=T,i.default=T},function(e,i,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=t(n(6)),r=a.default.resolve(a.default.dirname(process.argv[1])),l={params:{storagePath:"./public/fileStorage/files",cachePath:"./public/fileStorage/cache",staticPrefix:"/static",hostname:"http://localhost:80",staticPrefixAbsolutePath:"",storageAbsolutePath:"",cacheAbsolutePath:"",rootPath:r,imageOptimMaxWidth:800,imageOptimMaxHeight:600,staticDelimiter:"s",cacheDelimiter:"c",compressionOptions:{mozJpeg:{quality:70},pngQuant:{quality:[.8,.8]},optiPng:{optimizationLevel:3}}}};i.setParams=e=>{l.params=Object.assign(Object.assign({},l.params),e),l.params=Object.assign(Object.assign({},l.params),{staticPrefixAbsolutePath:a.default.resolve(r,l.params.staticPrefix),storageAbsolutePath:a.default.resolve(r,l.params.storagePath),cacheAbsolutePath:a.default.resolve(r,l.params.cachePath)})},i.getParams=()=>l.params,i.default=l},function(e,i,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=n(0),r=t(n(1)),l={files:null};i.default=function(e){if(null!==l.files)return l;const i=new r.default({context:e});return l.files=new a.DataLoader(e=>i.getFilesByIds(e).then(i=>a.collateForDataloader(e,i))),l}},function(e,i,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),function(e){e.image="image",e.document="document"}(i.FileType||(i.FileType={}))},function(e,i){e.exports=require("jimp")},function(e,i){e.exports=require("path")},function(e,i,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});i.default=class{constructor(){this.promise=new Promise((e,i)=>{this.resolve=i=>{this.file=i,e(i)},this.reject=i}),this.promise.catch(()=>{})}}},function(e,i,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const t=n(0);i.LOG_MAZ_FILES=t.LOG_MAZ_FILES,i.LOG_MAZ_SIZE=t.LOG_MAZ_SIZE,i.LOG_DATE_PATTERNT=t.LOG_DATE_PATTERNT,i.LOG_FILENAME_DEBUG=t.LOG_FILENAME_DEBUG,i.LOG_FILENAME_ERRORS=t.LOG_FILENAME_ERRORS,i.CRON_JOB_CLEAR_CACHE_NAME="fileStorageClearCache",i.REDIS_CACHE_NAME="fileStorageCache",i.LOG_FILENAME_FILES_STORAGE="file-storage-%DATE%.log"},function(e,i,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),function(e){for(var n in e)i.hasOwnProperty(n)||(i[n]=e[n])}(n(10))},function(e,i,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=t(n(5));i.Jimp=a.default,function(e){for(var n in e)i.hasOwnProperty(n)||(i[n]=e[n])}(n(11))},function(e,i,n){"use strict";function t(e){for(var n in e)i.hasOwnProperty(n)||(i[n]=e[n])}var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=a(n(12));i.makeSchema=r.default;const l=a(n(1));i.FileStorage=l.default,t(n(4)),t(n(36))},function(e,i,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var i={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(i[n]=e[n]);return i.default=e,i};Object.defineProperty(i,"__esModule",{value:!0});const r=t(n(13)),l=n(2),o=t(n(17)),d=t(n(19)),u=a(n(35));i.makeSchema=e=>{l.setParams(e);const i=r.default(l.getParams());return{typeDefs:u,resolvers:d.default,permissions:o.default,expressMiddleware:i}},i.default=i.makeSchema},function(e,i,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=n(0),r=n(2),l=t(n(14));i.default=e=>i=>{const n=i.context,{staticPrefix:t}=e,{logger:o,endpoint:d}=n,{storageAbsolutePath:u,staticDelimiter:s,cacheAbsolutePath:m,cacheDelimiter:p}=r.getParams(),c=a.Express.Router();return c.use(d,l.default({context:n})),c.use(`${t}/${s}`,a.Express.static(u)),o.fileStorage.info(`Registered static directory in «${u}» with static prefix «${t}»`),c.use(`${t}/${p}`,a.Express.static(m)),o.fileStorage.info(`Registered static cache directory in «${m}»`),c}},function(e,i,n){"use strict";var t=this&&this.__awaiter||function(e,i,n,t){return new(n||(n=Promise))((function(a,r){function l(e){try{d(t.next(e))}catch(e){r(e)}}function o(e){try{d(t.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof n?i:new n((function(e){e(i)}))).then(l,o)}d((t=t.apply(e,i||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=n(0),l=a(n(15)),o=n(16),d=a(n(7));i.default=e=>{const{context:i,limits:n}=e,{logger:a}=i;return(e,i,u)=>t(void 0,void 0,void 0,(function*(){if(!e.is("multipart/form-data"))return void u();const t=new Promise(i=>e.on("end",i)),{send:s}=i;i.send=(...e)=>{t.then(()=>{i.send=s,i.send(...e)})};const m={maxFieldSize:64e6,maxFileSize:1/0,maxFiles:1/0},p=new l.default({headers:e.headers,limits:Object.assign(Object.assign({fields:2},m),n)}),c=new Map;let f=null;p.on("field",(i,t,l,o)=>{if(o)throw a.fileStorage.error(`The ‘${i}’ multipart field value exceeds the ${n.maxFieldSize} byte size limit.`),new r.ServerError(`The ‘${i}’ multipart field value exceeds the ${n.maxFieldSize} byte size limit.`);if("operations"===i)try{f=JSON.parse(t)}catch(e){throw a.fileStorage.error("Invalid JSON in the «operations» multipart field"),new r.ServerError("Invalid JSON in the «operations» multipart field")}if("map"===i){try{const e=JSON.parse(t);Object.entries(e).forEach(([e])=>{c.set(Number(e),new d.default)})}catch(e){throw a.fileStorage.error("Invalid JSON in the «map» field"),new r.ServerError("Invalid JSON in the «map» field")}try{f.variables.files=f.variables.files.map((e,i)=>{const n=c.get(i);if(!n)throw a.fileStorage.error(`Can't assing file with index «${i}»`),new r.ServerError(`Can't assing file with index «${i}»`);return n})}catch(e){throw a.fileStorage.error("Can't assing file from variables",{err:e}),new r.ServerError("Can't assing file from variables")}e.body=f,u()}}),p.on("file",(e,i,t,l,d)=>{const u=c.get(Number(e));if(!u)throw a.fileStorage.error(`File from field «${e}» are not registered in map field`),new r.ServerError(`File from field «${e}» are not registered in map field`);const s=new o.WriteStream;s.on("error",()=>{i.unpipe(),i.resume()}),i.on("limit",()=>{throw a.fileStorage.error(`File truncated as it exceeds the ${n.maxFileSize} byte size limit.`),new r.ServerError(`File truncated as it exceeds the ${n.maxFileSize} byte size limit.`)}),i.on("error",e=>{i.unpipe(),s.destroy(new r.ServerError("Upload error",{error:e}))});const m={filename:t,mimeType:d,encoding:l,capacitor:s,createReadStream:e=>s.createReadStream(e)};Object.defineProperty(m,"capacitor",{value:s}),i.pipe(s),u.resolve(m)}),p.once("filesLimit",()=>{throw a.fileStorage.error(n.maxFiles+" max file uploads exceeded."),new r.ServerError(n.maxFiles+" max file uploads exceeded.")}),p.once("finish",()=>{if(e.unpipe(p),e.resume(),null===f)throw a.fileStorage.error("Missing multipart field «operations»"),new r.ServerError("Missing multipart field «operations»");if(!c.size)throw a.fileStorage.error("Missing multipart field «map»"),new r.ServerError("Missing multipart field «map»")}),p.once("error",e=>{throw a.fileStorage.error("Unknown error",e),new r.ServerError("Unknown error",e)}),e.pipe(p)}))}},function(e,i){e.exports=require("busboy")},function(e,i){e.exports=require("fs-capacitor")},function(e,i,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const t=n(18);i.permissions=t.shield({}),i.default=i.permissions},function(e,i){e.exports=require("graphql-shield")},function(e,i,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=t(n(20)),r=t(n(22)),l=t(n(32)),o=t(n(33)),d=t(n(34)),u={Query:{fileStorage:()=>({})},Mutation:{fileStorage:()=>({})},FileStorageQuery:{list:o.default,image:(e,i)=>i},FileStorageMutation:{delete:r.default,upload:d.default},File:l.default,Image:l.default,FileUpload:a.default};i.default=u},function(e,i,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=n(21),r=t(n(7)),l=new a.GraphQLScalarType({name:"FileUpload",description:"The `Upload` scalar type represents a file upload.",parseValue(e){if(e instanceof r.default)return e.promise;throw new a.GraphQLError("Upload value invalid")},parseLiteral(e){throw new a.GraphQLError("Upload literal unsupported",e)},serialize(){throw new a.GraphQLError("Upload serialization unsupported")}});i.default=l},function(e,i){e.exports=require("graphql")},function(e,i,n){"use strict";var t=this&&this.__awaiter||function(e,i,n,t){return new(n||(n=Promise))((function(a,r){function l(e){try{d(t.next(e))}catch(e){r(e)}}function o(e){try{d(t.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof n?i:new n((function(e){e(i)}))).then(l,o)}d((t=t.apply(e,i||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=n(0),l=a(n(3)),o=a(n(1));i.default=(e,i,n)=>t(void 0,void 0,void 0,(function*(){const{ids:e}=i,{logger:t,token:a}=n,{uuid:d}=a,u=new o.default({context:n}),s=l.default(n);try{const i=yield u.deleteFiles(e);return i.forEach(e=>{s.files.clear(e),t.fileStorage.debug(`File ${e} was deleted. Initiator: Account ${d}`)}),i.length!==e.length&&t.fileStorage.debug("Not all files were deleted, because some of them were not found in the database"),!0}catch(e){throw t.fileStorage.error("Failed to Delete files",{err:e,uuid:d}),new r.ServerError("Failed to Delete files",{err:e,uuid:d})}}))},function(e,i){e.exports=require("fs")},function(e,i){e.exports=require("imagemin")},function(e,i){e.exports=require("imagemin-mozjpeg")},function(e,i){e.exports=require("imagemin-optipng")},function(e,i){e.exports=require("imagemin-pngquant")},function(e,i){e.exports=require("mime-types")},function(e,i){e.exports=require("moment-timezone")},function(e,i){e.exports=require("rimraf")},function(e,i){e.exports=require("uuid")},function(e,i,n){"use strict";var t=this&&this.__awaiter||function(e,i,n,t){return new(n||(n=Promise))((function(a,r){function l(e){try{d(t.next(e))}catch(e){r(e)}}function o(e){try{d(t.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof n?i:new n((function(e){e(i)}))).then(l,o)}d((t=t.apply(e,i||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=n(0),l=a(n(3)),o=a(n(1)),d=n(4),u=new Proxy({id:()=>({}),createdAt:()=>({}),updatedAt:()=>({}),owner:()=>({}),category:()=>({}),mimeType:()=>({}),url:()=>({}),type:()=>({}),description:()=>({}),metaData:()=>({})},{get:(e,i)=>(e,n,a)=>t(void 0,void 0,void 0,(function*(){const{id:n,transform:t}=e,u=new o.default({context:a}),s=l.default(a),m=yield s.files.load(n);if(!m)throw new r.ServerError(`File with id ${n} not found`,{id:n});return m.type===d.FileType.image&&"url"===i&&t?u.getUrlWithTransform(m,t):m[i]}))});i.default=u},function(e,i,n){"use strict";var t=this&&this.__awaiter||function(e,i,n,t){return new(n||(n=Promise))((function(a,r){function l(e){try{d(t.next(e))}catch(e){r(e)}}function o(e){try{d(t.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof n?i:new n((function(e){e(i)}))).then(l,o)}d((t=t.apply(e,i||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=n(0),l=a(n(3)),o=a(n(1));i.default=(e,i,n)=>t(void 0,void 0,void 0,(function*(){const{transform:e}=i,{logger:t}=n,a=r.buildQueryFilter(i),d=new o.default({context:n}),u=l.default(n);try{const i=yield d.getFiles(a),n=r.buildCursorConnection(i,"files");return u.files.clearAll(),e&&(n.edges=n.edges.map(({node:i,cursor:n})=>({cursor:n,node:Object.assign(Object.assign({},i),{transform:e})}))),i.nodes.forEach(e=>{u.files.prime(e.id,e)}),n}catch(e){throw t.fileStorage.error("Failed to get Files list",{err:e}),new r.ServerError("Failed to get Files list",{err:e})}}))},function(e,i,n){"use strict";var t=this&&this.__awaiter||function(e,i,n,t){return new(n||(n=Promise))((function(a,r){function l(e){try{d(t.next(e))}catch(e){r(e)}}function o(e){try{d(t.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof n?i:new n((function(e){e(i)}))).then(l,o)}d((t=t.apply(e,i||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=a(n(1));i.default=(e,i,n)=>t(void 0,void 0,void 0,(function*(){const{files:e,info:a,noCompress:l}=i,{logger:o,token:d}=n,{uuid:u}=d,s=new r.default({context:n}),m=(yield Promise.all(e)).map((e,i)=>t(void 0,void 0,void 0,(function*(){const{createReadStream:n,mimeType:t,filename:r}=e,d=yield s.createFile(n(),Object.assign({mimeType:t},a[i]),l);return o.fileStorage.info(`File «${r}» uploaded successfully as «${d.absoluteFilename}»`,{uuid:u,mimeType:t}),{id:d.id}})));return Promise.all(m)}))},function(e,i){var n={kind:"Document",definitions:[{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"fileStorage"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileStorageQuery"}}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Mutation"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"fileStorage"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileStorageMutation"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"FileStorageMutation"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",description:{kind:"StringValue",value:"Delete files by IDs",block:!0},name:{kind:"Name",value:"delete"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"ids"},type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}}}},directives:[]}],type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},directives:[]},{kind:"FieldDefinition",description:{kind:"StringValue",value:"Upload files",block:!0},name:{kind:"Name",value:"upload"},arguments:[{kind:"InputValueDefinition",description:{kind:"StringValue",value:'Array of files\nFor example `curl` request will be:\ncurl localhost:3001/graphql \\\n-F operations=\'{ "query": "mutation($files: [FileUpload!]! $info: [FileUploadInfo!]!) { multipleUpload(files: $files info: $info) { id url } }", "variables": { "files": [null, null] }, "info": [{"owner": "xxxx-xxx-xxx", "category": "other"}, {"owner": "xxxx-xxx-xxx", "category": "other"}] }\' \\\n-F map=\'{ "0": ["variables.files.0"], "1": ["variables.files.1"] }\' \\\n-F 0=@b.txt \\\n-F 1=@c.txt',block:!0},name:{kind:"Name",value:"files"},type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileUpload"}}}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"info"},type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileUploadInfo"}}}}},directives:[]},{kind:"InputValueDefinition",description:{kind:"StringValue",value:"Only for images.\nIf true, the image will not be compressed",block:!0},name:{kind:"Name",value:"noCompress"},type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},directives:[]}],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"File"}}}},directives:[]}]},{kind:"InputObjectTypeDefinition",description:{kind:"StringValue",value:"Information about uploaded file",block:!0},name:{kind:"Name",value:"FileUploadInfo"},directives:[],fields:[{kind:"InputValueDefinition",description:{kind:"StringValue",value:"Your file owner",block:!0},name:{kind:"Name",value:"owner"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"InputValueDefinition",description:{kind:"StringValue",value:"Voluntary name of category",block:!0},name:{kind:"Name",value:"category"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"InputValueDefinition",description:{kind:"StringValue",value:"Description of this file",block:!0},name:{kind:"Name",value:"description"},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"InputValueDefinition",description:{kind:"StringValue",value:"Voluntary metadata of this file (e.g. title, alt for images)",block:!0},name:{kind:"Name",value:"metaData"},type:{kind:"NamedType",name:{kind:"Name",value:"JSON"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"FileStorageQuery"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",description:{kind:"StringValue",value:"Returns Drivers list bundle",block:!0},name:{kind:"Name",value:"list"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"first"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"offset"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"after"},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"orderBy"},type:{kind:"ListType",type:{kind:"NamedType",name:{kind:"Name",value:"FilesOrderBy"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"filter"},type:{kind:"NamedType",name:{kind:"Name",value:"FilesListFilter"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"transform"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInput"}},directives:[]}],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FilesListConnection"}}},directives:[]},{kind:"FieldDefinition",description:{kind:"StringValue",value:"Returns single image",block:!0},name:{kind:"Name",value:"image"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"id"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"transform"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInput"}},directives:[]}],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Image"}}},directives:[]},{kind:"FieldDefinition",description:{kind:"StringValue",value:"Returns single file",block:!0},name:{kind:"Name",value:"file"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"id"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]}],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"File"}}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"FilesListFilter"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"owner"},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"category"},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"mimeType"},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeDefinition",description:{kind:"StringValue",value:"File adge bundle",block:!0},name:{kind:"Name",value:"FilesEdge"},interfaces:[{kind:"NamedType",name:{kind:"Name",value:"Edge"}}],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"node"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"File"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"cursor"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"InputObjectTypeDefinition",description:{kind:"StringValue",value:"Possible data to order list of files",block:!0},name:{kind:"Name",value:"FilesOrderBy"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"field"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FilesOrderField"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"direction"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"OrderDirection"}}},directives:[]}]},{kind:"EnumTypeDefinition",description:{kind:"StringValue",value:"Possible data to sort of files list",block:!0},name:{kind:"Name",value:"FilesOrderField"},directives:[],values:[{kind:"EnumValueDefinition",name:{kind:"Name",value:"category"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"mimeType"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"createdAt"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"updatedAt"},directives:[]}]},{kind:"EnumTypeDefinition",name:{kind:"Name",value:"FileType"},directives:[],values:[{kind:"EnumValueDefinition",name:{kind:"Name",value:"image"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"document"},directives:[]}]},{kind:"ObjectTypeDefinition",description:{kind:"StringValue",value:"Files list connection",block:!0},name:{kind:"Name",value:"FilesListConnection"},interfaces:[{kind:"NamedType",name:{kind:"Name",value:"Connection"}}],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"totalCount"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"pageInfo"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"PageInfo"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"edges"},arguments:[],type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NamedType",name:{kind:"Name",value:"FilesEdge"}}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"File"},interfaces:[{kind:"NamedType",name:{kind:"Name",value:"Node"}}],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"createdAt"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"DateTime"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"updatedAt"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"DateTime"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"owner"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"type"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileType"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"category"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"mimeType"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"url"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"description"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"metaData"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"JSON"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Image"},interfaces:[{kind:"NamedType",name:{kind:"Name",value:"Node"}}],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"createdAt"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"DateTime"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"updatedAt"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"DateTime"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"owner"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"type"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileType"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"category"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"mimeType"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"url"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"description"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"metaData"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"JSON"}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"ImageTransformInput"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"resize"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInputResize"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"cover"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInputCover"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"contain"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInputContain"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"scaleToFit"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInputScaleToFit"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"gaussian"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"blur"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"quality"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"greyscale"},type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"ImageTransformInputResize"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"width"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"height"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"ImageTransformInputCover"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"width"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"height"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"ImageTransformInputContain"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"width"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"height"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"ImageTransformInputScaleToFit"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"width"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"height"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]}]},{kind:"ScalarTypeDefinition",description:{kind:"StringValue",value:"A GraphQL `FileUpload` scalar as specified GraphQL multipart request specification: https://github.com/jaydenseric/graphql-multipart-request-spec#graphql-multipart-request-specification",block:!0},name:{kind:"Name",value:"FileUpload"},directives:[]}],loc:{start:0,end:3419}};n.loc.source={body:'\nextend type Query {\n  fileStorage: FileStorageQuery!\n}\n\nextend type Mutation {\n  fileStorage: FileStorageMutation!\n}\n\ntype FileStorageMutation {\n  """\n  Delete files by IDs\n  """\n  delete(ids: [ID!]!): Boolean\n  \n  """\n  Upload files\n  """\n  upload(\n    """\n    Array of files\n    For example `curl` request will be:\n    curl localhost:3001/graphql \\\n    -F operations=\'{ "query": "mutation($files: [FileUpload!]! $info: [FileUploadInfo!]!) { multipleUpload(files: $files info: $info) { id url } }", "variables": { "files": [null, null] }, "info": [{"owner": "xxxx-xxx-xxx", "category": "other"}, {"owner": "xxxx-xxx-xxx", "category": "other"}] }\' \\\n    -F map=\'{ "0": ["variables.files.0"], "1": ["variables.files.1"] }\' \\\n    -F 0=@b.txt \\\n    -F 1=@c.txt\n    """\n    files: [FileUpload!]!\n    info: [FileUploadInfo!]!\n    \n    """\n    Only for images.\n    If true, the image will not be compressed\n    """\n    noCompress: Boolean\n  ): [File!]\n}\n\n"""\nInformation about uploaded file\n"""\ninput FileUploadInfo {\n\n  """\n  Your file owner\n  """\n  owner: ID!\n\n  """\n  Voluntary name of category\n  """\n  category: String!\n\n  """\n  Description of this file\n  """\n  description: String\n\n  """\n  Voluntary metadata of this file (e.g. title, alt for images)\n  """\n  metaData: JSON\n}\n\ntype FileStorageQuery {\n  """\n  Returns Drivers list bundle\n  """\n  list(\n    first: Int\n    offset: Int\n    after: String\n    orderBy: [FilesOrderBy]\n    filter: FilesListFilter\n    transform: ImageTransformInput\n  ): FilesListConnection!\n\n  """\n  Returns single image\n  """\n  image(id: ID! transform: ImageTransformInput): Image!\n  \n  """\n  Returns single file\n  """\n  file(id: ID!): File!\n}\n\n\ninput FilesListFilter {\n  owner: ID\n  category: String\n  mimeType: String\n}\n\n"""\nFile adge bundle\n"""\ntype FilesEdge implements Edge {\n  node: File!\n  cursor: String!\n}\n\n"""\nPossible data to order list of files\n"""\ninput FilesOrderBy {\n  field: FilesOrderField!\n  direction: OrderDirection!\n}\n\n\n"""\nPossible data to sort of files list\n"""\nenum FilesOrderField {\n  category\n  mimeType\n  createdAt\n  updatedAt\n}\n\nenum FileType {\n  image\n  document\n}\n\n"""\nFiles list connection\n"""\ntype FilesListConnection implements Connection {\n  totalCount: Int!\n  pageInfo: PageInfo!\n  edges: [FilesEdge]!\n}\n\n\ntype File implements Node {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  owner: ID!\n  type: FileType!\n  category: String!\n  mimeType: String!\n  url: String!\n  description: String\n  metaData: JSON\n}\n\ntype Image implements Node {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  owner: ID!\n  type: FileType!\n  category: String!\n  mimeType: String!\n  url: String!\n  description: String\n  metaData: JSON\n}\n\ninput ImageTransformInput {\n  resize: ImageTransformInputResize\n  cover: ImageTransformInputCover\n  contain: ImageTransformInputContain\n  scaleToFit: ImageTransformInputScaleToFit\n  gaussian: Int\n  blur: Int\n  quality: Int\n  greyscale: Boolean\n}\n\ninput ImageTransformInputResize {\n  width: Int!\n  height: Int!\n}\n\ninput ImageTransformInputCover {\n  width: Int!\n  height: Int!\n}\n\ninput ImageTransformInputContain {\n  width: Int!\n  height: Int!\n}\n\ninput ImageTransformInputScaleToFit {\n  width: Int!\n  height: Int!\n}\n\n"""\nA GraphQL `FileUpload` scalar as specified GraphQL multipart request specification: https://github.com/jaydenseric/graphql-multipart-request-spec#graphql-multipart-request-specification\n"""\nscalar FileUpload',name:"GraphQL request",locationOffset:{line:1,column:1}};e.exports=n},function(e,i,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const t=n(37);n(38);const a=n(8),r=t.format.combine(t.format.metadata(),t.format.json(),t.format.timestamp({format:"YYYY-MM-DDTHH:mm:ssZZ"}),t.format.splat(),t.format.printf(e=>{const{timestamp:i,level:n,message:t,metadata:a}=e,r="{}"!==JSON.stringify(a)?a:null;return`${i} ${n}: ${t} ${r?JSON.stringify(r):""}`}));i.configureFileStorageLogger=e=>{const{logDir:i,logFilenamePattern:n}=e,l=n||a.LOG_FILENAME_FILES_STORAGE;return t.createLogger({level:"debug",format:r,transports:[new t.transports.DailyRotateFile({filename:`${i}/${l}`,level:"info",datePattern:a.LOG_DATE_PATTERNT,zippedArchive:!0,maxSize:a.LOG_MAZ_SIZE,maxFiles:a.LOG_MAZ_FILES}),new t.transports.DailyRotateFile({filename:`${i}/${a.LOG_FILENAME_ERRORS}`,level:"error",datePattern:a.LOG_DATE_PATTERNT,zippedArchive:!0,maxSize:a.LOG_MAZ_SIZE,maxFiles:a.LOG_MAZ_FILES}),new t.transports.DailyRotateFile({filename:`${i}/${a.LOG_FILENAME_DEBUG}`,level:"debug",datePattern:a.LOG_DATE_PATTERNT,zippedArchive:!0,maxSize:a.LOG_MAZ_SIZE,maxFiles:a.LOG_MAZ_FILES})]})},i.default=i.configureFileStorageLogger},function(e,i){e.exports=require("winston")},function(e,i){e.exports=require("winston-daily-rotate-file")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,