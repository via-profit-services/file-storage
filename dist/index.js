/*!
 * 
 *  Via Profit Services / Settings Manager
 * 
 *  Repository https://gitlab.com/via-profit-services/file-storage
 *  Contact    promo@via-profit.ru
 *  Website    https://via-profit.ru
 *       
 */
module.exports=function(e){var i={};function n(t){if(i[t])return i[t].exports;var a=i[t]={i:t,l:!1,exports:{}};return e[t].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=i,n.d=function(e,i,t){n.o(e,i)||Object.defineProperty(e,i,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,i){if(1&i&&(e=n(e)),8&i)return e;if(4&i&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&i&&"string"!=typeof e)for(var a in e)n.d(t,a,function(i){return e[i]}.bind(null,a));return t},n.n=function(e){var i=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(i,"a",i),i},n.o=function(e,i){return Object.prototype.hasOwnProperty.call(e,i)},n.p="",n(n.s=10)}([function(e,i){e.exports=require("@via-profit-services/core")},function(e,i,n){"use strict";var t=this&&this.__awaiter||function(e,i,n,t){return new(n||(n=Promise))((function(a,r){function o(e){try{d(t.next(e))}catch(e){r(e)}}function l(e){try{d(t.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof n?i:new n((function(e){e(i)}))).then(o,l)}d((t=t.apply(e,i||[])).next())}))},a=this&&this.__rest||function(e,i){var n={};for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&i.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(t=Object.getOwnPropertySymbols(e);a<t.length;a++)i.indexOf(t[a])<0&&Object.prototype.propertyIsEnumerable.call(e,t[a])&&(n[t[a]]=e[t[a]])}return n},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const o=r(n(21)),l=r(n(7)),d=n(0),u=r(n(22)),s=r(n(23)),m=r(n(24)),c=r(n(25)),p=r(n(5)),f=r(n(26)),y=r(n(27)),v=r(n(28)),k=n(29),g=n(9),N=n(2),h=n(4),T=n(6);class F{constructor(e){this.props=e}clearCache(){return t(this,void 0,void 0,(function*(){const{cacheAbsolutePath:e,rootPath:i}=N.getParams(),{redis:n,logger:t}=this.props.context;e!==i&&o.default.existsSync(e)&&(yield n.del(g.REDIS_CACHE_NAME),v.default(e+"/*",e=>{e&&t.fileStorage.error("Failed to remove cache directory",{err:e})}),t.fileStorage.info(`Cache was cleared in «${e}»`))}))}checkFileInCache(e){return t(this,void 0,void 0,(function*(){const{redis:i}=this.props.context;return yield i.hget(g.REDIS_CACHE_NAME,e)}))}saveImageIntoTheCache(e,i){return t(this,void 0,void 0,(function*(){const{redis:n}=this.props.context,{payload:t,token:a}=e,{cacheAbsolutePath:r}=N.getParams(),d=F.getPathFromUuid(k.v4()),u=l.default.join(r,d),s=`${u}.${t.ext}`,m=l.default.dirname(u);o.default.existsSync(m)||o.default.mkdirSync(m,{recursive:!0}),o.default.writeFileSync(s,i),yield n.hset(g.REDIS_CACHE_NAME,a,s)}))}getUrlWithTransform(e,i){return t(this,void 0,void 0,(function*(){const{redis:n,logger:t}=this.props.context,{hostname:a,cacheDelimiter:r,staticPrefix:u,cacheAbsolutePath:s,storageAbsolutePath:m}=N.getParams(),{url:c,id:p,mimeType:f,isLocalFile:y}=e,v=F.getExtensionByMimeType(f),h={id:p,ext:v,mimeType:f,transform:i};if(!y)return c;const T=Buffer.from(JSON.stringify(h),"utf8").toString("base64"),S=yield n.hget(g.REDIS_CACHE_NAME,T);if(S)return[`${a}${u}`,r,""+S].join("/");const I=`${F.getPathFromUuid(p)}.${v}`,D=`${F.getPathFromUuid(k.v4())}.${v}`,_=l.default.join(m,I),b=l.default.join(s,D),x=l.default.dirname(b);if(!o.default.existsSync(_))throw new d.ServerError(`File ${I} with id ${p} not exists`);o.default.existsSync(x)||o.default.mkdirSync(x,{recursive:!0}),o.default.copyFile(_,b,()=>{n.hset(g.REDIS_CACHE_NAME,T,D)});try{this.applyTransform(b,i),t.fileStorage.debug(`Apply transformation to file ${D} from ${I}`,{transform:i})}catch(e){t.fileStorage.error("Failed to apply transformation with file "+D,{err:e})}return[`${a}${u}`,r,""+D].join("/")}))}static getPathFromUuid(e){return[e.substr(0,2),e.substr(2,2),e].join("/")}static resolveFile(e){const{mimeType:i,isLocalFile:n,url:t,id:a}=e;if(!n)return{resolveAbsolutePath:t,resolvePath:t};const{storagePath:r,storageAbsolutePath:o}=N.getParams(),d=T.FileStorage.getExtensionByMimeType(i),u=T.FileStorage.getPathFromUuid(a);return{resolvePath:l.default.join(r,`${u}.${d}`),resolveAbsolutePath:l.default.join(o,`${u}.${d}`)}}applyTransform(e,i){return t(this,void 0,void 0,(function*(){let n=yield p.default.read(e);Object.entries(i).forEach(([e,i])=>{if("resize"===e){const{width:e,height:t}=i;n=n.resize(e,t)}if("cover"===e){const{width:e,height:t}=i;n=n.cover(e,t)}if("contain"===e){const{width:e,height:t}=i;n=n.contain(e,t)}if("scaleToFit"===e){const{width:e,height:t}=i;n=n.scaleToFit(e,t)}if("gaussian"===e){const e=i;n=n.gaussian(e)}if("blur"===e){const e=i;n=n.gaussian(e)}if("greyscale"===e){!0===i&&(n=n.grayscale())}}),yield n.writeAsync(e)}))}static getFilenameFromUuid(e){const{storagePath:i}=N.getParams(),n=F.getPathFromUuid(e);return l.default.join("/",i,n)}static getStoragePath(){const{storagePath:e,storageAbsolutePath:i}=N.getParams();return{storagePath:e,storageAbsolutePath:i}}static getCachePath(){const{cachePath:e,cacheAbsolutePath:i}=N.getParams();return{cachePath:e,cacheAbsolutePath:i}}static getFileTypeByMimeType(e){switch(e){case"image/tiff":case"image/png":case"image/jpeg":case"image/gif":case"image/svg":return h.FileType.image;default:return h.FileType.document}}static getExtensionByMimeType(e){return f.default.extension(e)||"txt"}static getMimeTypeByExtension(e){return f.default.lookup(e)||"text/plain"}static extractExtensionFromFilename(e){return e.split(".").pop()}static getMimeTypeByFilename(e){const i=F.extractExtensionFromFilename(e);return F.getMimeTypeByExtension(i)}getFiles(e){return t(this,void 0,void 0,(function*(){const{context:i}=this.props,{knex:n}=i,{staticPrefix:t,hostname:r,staticDelimiter:o}=N.getParams(),{limit:l,offset:u,orderBy:s,where:m}=e,c=yield n.select(["*",n.raw('count(*) over() as "totalCount"')]).orderBy(d.convertOrderByToKnex(s)).from("fileStorage").limit(l||1).offset(u||0).where(e=>d.convertWhereToKnex(e,m)).orderBy(d.convertOrderByToKnex(s)).then(e=>({totalCount:e.length?Number(e[0].totalCount):0,nodes:e.map(e=>{var{totalCount:i,url:n}=e,l=a(e,["totalCount","url"]);return Object.assign(Object.assign({},l),{url:l.isLocalFile?`${r}${t}/${o}/${n}`:n})})})),{totalCount:p,nodes:f}=c;return{totalCount:p,nodes:f,where:m,orderBy:s,limit:l,offset:u}}))}getFilesByIds(e){return t(this,void 0,void 0,(function*(){const{nodes:i}=yield this.getFiles({where:[["id",d.TWhereAction.IN,e]],offset:0,limit:e.length});return i}))}getFile(e){return t(this,void 0,void 0,(function*(){const i=yield this.getFilesByIds([e]);return!!i.length&&i[0]}))}updateFile(e,i){return t(this,void 0,void 0,(function*(){const{knex:n,timezone:t}=this.props.context;yield n("fileStorage").update(Object.assign(Object.assign({},i),{updatedAt:y.default.tz(t).format()})).where("id",e)}))}createTemporaryFile(e,i){return t(this,void 0,void 0,(function*(){const n=i.id||k.v4(),{temporaryAbsolutePath:t,hostname:a,temporaryDelimiter:r,staticPrefix:d}=N.getParams(),u=F.getExtensionByMimeType(i.mimeType),s=`${F.getPathFromUuid(n)}.${u}`,m=l.default.join(t,s),c=l.default.dirname(m);return new Promise(i=>{o.default.existsSync(c)||o.default.mkdirSync(c,{recursive:!0});const t=`${a}${d}/${r}/${s}`;e.pipe(o.default.createWriteStream(m)).on("close",()=>{i({id:n,absoluteFilename:m,url:t})})})}))}createFile(e,i,n){return t(this,void 0,void 0,(function*(){const{knex:t,timezone:a}=this.props.context,{storageAbsolutePath:r,compressionOptions:f}=N.getParams(),v=i.id||k.v4(),g=F.getExtensionByMimeType(i.mimeType),h=`${F.getPathFromUuid(v)}.${g}`,T=i.url||h,S=(yield t("fileStorage").insert(Object.assign(Object.assign({isLocalFile:!0,id:v,url:T,type:F.getFileTypeByMimeType(i.mimeType)},i),{createdAt:y.default.tz(a).format(),updatedAt:y.default.tz(a).format()})).returning("id"))[0];if(!S)throw new d.ServerError("Failed to register file in Database");const I=l.default.join(r,h),D=l.default.dirname(I);return new Promise(t=>{o.default.existsSync(D)||o.default.mkdirSync(D,{recursive:!0}),e.pipe(o.default.createWriteStream(I)).on("close",()=>{if(["image/png","image/jpeg"].includes(i.mimeType)){const{imageOptimMaxWidth:e,imageOptimMaxHeight:i}=N.getParams();p.default.read(I).then(n=>n.scaleToFit(e,i)).then(e=>e.writeAsync(I)).then(()=>{n||u.default([I],{plugins:[s.default(f.mozJpeg),c.default(f.pngQuant),m.default(f.optiPng)]}).then(e=>{const{data:i}=e[0];o.default.writeFileSync(I,i)})}).then(()=>t({id:S,absoluteFilename:I}))}else t({id:S,absoluteFilename:I})})})}))}deleteFiles(e){return t(this,void 0,void 0,(function*(){const{knex:i}=this.props.context,n=yield this.getFilesByIds(e);return n.length&&n.forEach(e=>{if(e.isLocalFile||e.url.match(/^\/[a-z0-9]+/i)){const i=F.getFilenameFromUuid(e.id),n=l.default.resolve(i),t=l.default.dirname(i),a=l.default.resolve(t,"..");try{o.default.existsSync(n)&&o.default.unlinkSync(n),o.default.readdirSync(t).length&&o.default.unlinkSync(t),o.default.readdirSync(a).length&&o.default.unlinkSync(a)}catch(i){throw new d.ServerError(`\n              Failed to delete file ${e.id} in path ${n}`,{err:i})}}}),yield i("fileStorage").del().whereIn("id",e).returning("id")}))}}i.FileStorageService=F,i.default=F},function(e,i,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=t(n(7)),r=a.default.resolve(a.default.dirname(process.argv[1])),o={params:{storagePath:"./public/fileStorage/files",cachePath:"./public/fileStorage/cache",temporaryPath:"./public/fileStorage/temp",staticPrefix:"/static",hostname:"http://localhost:80",staticPrefixAbsolutePath:"",storageAbsolutePath:"",cacheAbsolutePath:"",temporaryAbsolutePath:"",rootPath:r,imageOptimMaxWidth:800,imageOptimMaxHeight:600,staticDelimiter:"s",cacheDelimiter:"c",temporaryDelimiter:"t",compressionOptions:{mozJpeg:{quality:70},pngQuant:{quality:[.8,.8]},optiPng:{optimizationLevel:3}}}};i.setParams=e=>{o.params=Object.assign(Object.assign({},o.params),e),o.params=Object.assign(Object.assign({},o.params),{staticPrefixAbsolutePath:a.default.resolve(r,o.params.staticPrefix),storageAbsolutePath:a.default.resolve(r,o.params.storagePath),cacheAbsolutePath:a.default.resolve(r,o.params.cachePath),temporaryAbsolutePath:a.default.resolve(r,o.params.temporaryPath)})},i.getParams=()=>o.params,i.default=o},function(e,i,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=n(0),r=t(n(1)),o={files:null};i.default=function(e){if(null!==o.files)return o;const i=new r.default({context:e});return o.files=new a.DataLoader(e=>i.getFilesByIds(e).then(i=>a.collateForDataloader(e,i))),o}},function(e,i,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),function(e){e.image="image",e.document="document"}(i.FileType||(i.FileType={}))},function(e,i){e.exports=require("jimp")},function(e,i,n){"use strict";function t(e){for(var n in e)i.hasOwnProperty(n)||(i[n]=e[n])}var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=a(n(12));i.makeSchema=r.default;const o=a(n(1));i.FileStorage=o.default,t(n(4)),t(n(34))},function(e,i){e.exports=require("path")},function(e,i,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});i.default=class{constructor(){this.promise=new Promise((e,i)=>{this.resolve=i=>{this.file=i,e(i)},this.reject=i}),this.promise.catch(()=>{})}}},function(e,i,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const t=n(0);i.LOG_MAZ_FILES=t.LOG_MAZ_FILES,i.LOG_MAZ_SIZE=t.LOG_MAZ_SIZE,i.LOG_DATE_PATTERNT=t.LOG_DATE_PATTERNT,i.LOG_FILENAME_DEBUG=t.LOG_FILENAME_DEBUG,i.LOG_FILENAME_ERRORS=t.LOG_FILENAME_ERRORS,i.CRON_JOB_CLEAR_CACHE_NAME="fileStorageClearCache",i.REDIS_CACHE_NAME="fileStorageCache",i.LOG_FILENAME_FILES_STORAGE="file-storage-%DATE%.log"},function(e,i,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),function(e){for(var n in e)i.hasOwnProperty(n)||(i[n]=e[n])}(n(11))},function(e,i,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=t(n(5));i.Jimp=a.default,function(e){for(var n in e)i.hasOwnProperty(n)||(i[n]=e[n])}(n(6))},function(e,i,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var i={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(i[n]=e[n]);return i.default=e,i};Object.defineProperty(i,"__esModule",{value:!0});const r=t(n(13)),o=n(2),l=t(n(17)),d=a(n(33));i.makeSchema=e=>{o.setParams(e);const i=r.default(o.getParams());return{typeDefs:d,resolvers:l.default,expressMiddleware:i}},i.default=i.makeSchema},function(e,i,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=n(0),r=n(2),o=t(n(14));i.default=e=>i=>{const n=i.context,{staticPrefix:t}=e,{logger:l,endpoint:d}=n,{storageAbsolutePath:u,staticDelimiter:s,cacheAbsolutePath:m,cacheDelimiter:c,temporaryAbsolutePath:p,temporaryDelimiter:f}=r.getParams(),y=a.Express.Router();return y.use(d,o.default({context:n})),y.use(`${t}/${s}`,a.Express.static(u)),l.fileStorage.info(`Registered static directory in «${u}» with static prefix «${t}»`),y.use(`${t}/${c}`,a.Express.static(m)),l.fileStorage.info(`Registered static cache directory in «${m}»`),y.use(`${t}/${f}`,a.Express.static(p)),l.fileStorage.info(`Registered static temporary directory in «${p}»`),y}},function(e,i,n){"use strict";var t=this&&this.__awaiter||function(e,i,n,t){return new(n||(n=Promise))((function(a,r){function o(e){try{d(t.next(e))}catch(e){r(e)}}function l(e){try{d(t.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof n?i:new n((function(e){e(i)}))).then(o,l)}d((t=t.apply(e,i||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=n(0),o=a(n(15)),l=n(16),d=a(n(8));i.default=e=>{const{context:i,limits:n}=e,{logger:a}=i;return(e,i,u)=>t(void 0,void 0,void 0,(function*(){if(!e.is("multipart/form-data"))return void u();const t=new Promise(i=>e.on("end",i)),{send:s}=i;i.send=(...e)=>{t.then(()=>{i.send=s,i.send(...e)})};const m={maxFieldSize:64e6,maxFileSize:1/0,maxFiles:1/0},c=new o.default({headers:e.headers,limits:Object.assign(Object.assign({fields:2},m),n)}),p=new Map;let f=null;c.on("field",(i,t,o,l)=>{if(l)throw a.fileStorage.error(`The ‘${i}’ multipart field value exceeds the ${n.maxFieldSize} byte size limit.`),new r.ServerError(`The ‘${i}’ multipart field value exceeds the ${n.maxFieldSize} byte size limit.`);if("operations"===i)try{f=JSON.parse(t)}catch(e){throw a.fileStorage.error("Invalid JSON in the «operations» multipart field"),new r.ServerError("Invalid JSON in the «operations» multipart field")}if("map"===i){try{const e=JSON.parse(t);Object.entries(e).forEach(([e])=>{p.set(Number(e),new d.default)})}catch(e){throw a.fileStorage.error("Invalid JSON in the «map» field"),new r.ServerError("Invalid JSON in the «map» field")}try{f.variables.files=f.variables.files.map((e,i)=>{const n=p.get(i);if(!n)throw a.fileStorage.error(`Can't assing file with index «${i}»`),new r.ServerError(`Can't assing file with index «${i}»`);return n})}catch(e){throw a.fileStorage.error("Can't assing file from variables",{err:e}),new r.ServerError("Can't assing file from variables")}e.body=f,u()}}),c.on("file",(e,i,t,o,d)=>{const u=p.get(Number(e));if(!u)throw a.fileStorage.error(`File from field «${e}» are not registered in map field`),new r.ServerError(`File from field «${e}» are not registered in map field`);const s=new l.WriteStream;s.on("error",()=>{i.unpipe(),i.resume()}),i.on("limit",()=>{throw a.fileStorage.error(`File truncated as it exceeds the ${n.maxFileSize} byte size limit.`),new r.ServerError(`File truncated as it exceeds the ${n.maxFileSize} byte size limit.`)}),i.on("error",e=>{i.unpipe(),s.destroy(new r.ServerError("Upload error",{error:e}))});const m={filename:t,mimeType:d,encoding:o,capacitor:s,createReadStream:e=>s.createReadStream(e)};Object.defineProperty(m,"capacitor",{value:s}),i.pipe(s),u.resolve(m)}),c.once("filesLimit",()=>{throw a.fileStorage.error(n.maxFiles+" max file uploads exceeded."),new r.ServerError(n.maxFiles+" max file uploads exceeded.")}),c.once("finish",()=>{if(e.unpipe(c),e.resume(),null===f)throw a.fileStorage.error("Missing multipart field «operations»"),new r.ServerError("Missing multipart field «operations»");if(!p.size)throw a.fileStorage.error("Missing multipart field «map»"),new r.ServerError("Missing multipart field «map»")}),c.once("error",e=>{throw a.fileStorage.error("Unknown error",e),new r.ServerError("Unknown error",e)}),e.pipe(c)}))}},function(e,i){e.exports=require("busboy")},function(e,i){e.exports=require("fs-capacitor")},function(e,i,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=t(n(18)),r=t(n(20)),o=t(n(30)),l=t(n(31)),d=t(n(32)),u={Query:{fileStorage:()=>({})},Mutation:{fileStorage:()=>({})},FileStorageQuery:{list:l.default,image:(e,i)=>i},FileStorageMutation:{delete:r.default,upload:d.default},File:o.default,Image:o.default,FileUpload:a.default};i.default=u},function(e,i,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const a=n(19),r=t(n(8)),o=new a.GraphQLScalarType({name:"FileUpload",description:"The `Upload` scalar type represents a file upload.",parseValue(e){if(e instanceof r.default)return e.promise;throw new a.GraphQLError("Upload value invalid")},parseLiteral(e){throw new a.GraphQLError("Upload literal unsupported",e)},serialize(){throw new a.GraphQLError("Upload serialization unsupported")}});i.default=o},function(e,i){e.exports=require("graphql")},function(e,i,n){"use strict";var t=this&&this.__awaiter||function(e,i,n,t){return new(n||(n=Promise))((function(a,r){function o(e){try{d(t.next(e))}catch(e){r(e)}}function l(e){try{d(t.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof n?i:new n((function(e){e(i)}))).then(o,l)}d((t=t.apply(e,i||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=n(0),o=a(n(3)),l=a(n(1));i.default=(e,i,n)=>t(void 0,void 0,void 0,(function*(){const{ids:e}=i,{logger:t,token:a}=n,{uuid:d}=a,u=new l.default({context:n}),s=o.default(n);try{const i=yield u.deleteFiles(e);return i.forEach(e=>{s.files.clear(e),t.fileStorage.debug(`File ${e} was deleted. Initiator: Account ${d}`)}),i.length!==e.length&&t.fileStorage.debug("Not all files were deleted, because some of them were not found in the database"),!0}catch(e){throw t.fileStorage.error("Failed to Delete files",{err:e,uuid:d}),new r.ServerError("Failed to Delete files",{err:e,uuid:d})}}))},function(e,i){e.exports=require("fs")},function(e,i){e.exports=require("imagemin")},function(e,i){e.exports=require("imagemin-mozjpeg")},function(e,i){e.exports=require("imagemin-optipng")},function(e,i){e.exports=require("imagemin-pngquant")},function(e,i){e.exports=require("mime-types")},function(e,i){e.exports=require("moment-timezone")},function(e,i){e.exports=require("rimraf")},function(e,i){e.exports=require("uuid")},function(e,i,n){"use strict";var t=this&&this.__awaiter||function(e,i,n,t){return new(n||(n=Promise))((function(a,r){function o(e){try{d(t.next(e))}catch(e){r(e)}}function l(e){try{d(t.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof n?i:new n((function(e){e(i)}))).then(o,l)}d((t=t.apply(e,i||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=n(0),o=a(n(3)),l=a(n(1)),d=n(4),u=new Proxy({id:()=>({}),createdAt:()=>({}),updatedAt:()=>({}),owner:()=>({}),category:()=>({}),mimeType:()=>({}),url:()=>({}),type:()=>({}),description:()=>({}),metaData:()=>({})},{get:(e,i)=>(e,n,a)=>t(void 0,void 0,void 0,(function*(){const{id:n,transform:t}=e,u=new l.default({context:a}),s=o.default(a),m=yield s.files.load(n);if(!m)throw new r.ServerError(`File with id ${n} not found`,{id:n});return m.type===d.FileType.image&&"url"===i&&t?u.getUrlWithTransform(m,t):m[i]}))});i.default=u},function(e,i,n){"use strict";var t=this&&this.__awaiter||function(e,i,n,t){return new(n||(n=Promise))((function(a,r){function o(e){try{d(t.next(e))}catch(e){r(e)}}function l(e){try{d(t.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof n?i:new n((function(e){e(i)}))).then(o,l)}d((t=t.apply(e,i||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=n(0),o=a(n(3)),l=a(n(1));i.default=(e,i,n)=>t(void 0,void 0,void 0,(function*(){const{transform:e}=i,{logger:t}=n,a=r.buildQueryFilter(i),d=new l.default({context:n}),u=o.default(n);try{const i=yield d.getFiles(a),n=r.buildCursorConnection(i,"files");return u.files.clearAll(),e&&(n.edges=n.edges.map(({node:i,cursor:n})=>({cursor:n,node:Object.assign(Object.assign({},i),{transform:e})}))),i.nodes.forEach(e=>{u.files.prime(e.id,e)}),n}catch(e){throw t.fileStorage.error("Failed to get Files list",{err:e}),new r.ServerError("Failed to get Files list",{err:e})}}))},function(e,i,n){"use strict";var t=this&&this.__awaiter||function(e,i,n,t){return new(n||(n=Promise))((function(a,r){function o(e){try{d(t.next(e))}catch(e){r(e)}}function l(e){try{d(t.throw(e))}catch(e){r(e)}}function d(e){var i;e.done?a(e.value):(i=e.value,i instanceof n?i:new n((function(e){e(i)}))).then(o,l)}d((t=t.apply(e,i||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const r=a(n(1));i.default=(e,i,n)=>t(void 0,void 0,void 0,(function*(){const{files:e,info:a,noCompress:o}=i,{logger:l,token:d}=n,{uuid:u}=d,s=new r.default({context:n}),m=(yield Promise.all(e)).map((e,i)=>t(void 0,void 0,void 0,(function*(){const{createReadStream:n,mimeType:t,filename:r}=e,d=yield s.createFile(n(),Object.assign({mimeType:t},a[i]),o);return l.fileStorage.info(`File «${r}» uploaded successfully as «${d.absoluteFilename}»`,{uuid:u,mimeType:t}),{id:d.id}})));return Promise.all(m)}))},function(e,i){var n={kind:"Document",definitions:[{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"fileStorage"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileStorageQuery"}}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Mutation"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"fileStorage"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileStorageMutation"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"FileStorageMutation"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",description:{kind:"StringValue",value:"Delete files by IDs",block:!0},name:{kind:"Name",value:"delete"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"ids"},type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}}}},directives:[]}],type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},directives:[]},{kind:"FieldDefinition",description:{kind:"StringValue",value:"Upload files",block:!0},name:{kind:"Name",value:"upload"},arguments:[{kind:"InputValueDefinition",description:{kind:"StringValue",value:'Array of files\nFor example `curl` request will be:\ncurl localhost:3001/graphql \\\n-F operations=\'{ "query": "mutation($files: [FileUpload!]! $info: [FileUploadInfo!]!) { multipleUpload(files: $files info: $info) { id url } }", "variables": { "files": [null, null] }, "info": [{"owner": "xxxx-xxx-xxx", "category": "other"}, {"owner": "xxxx-xxx-xxx", "category": "other"}] }\' \\\n-F map=\'{ "0": ["variables.files.0"], "1": ["variables.files.1"] }\' \\\n-F 0=@b.txt \\\n-F 1=@c.txt',block:!0},name:{kind:"Name",value:"files"},type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileUpload"}}}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"info"},type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileUploadInfo"}}}}},directives:[]},{kind:"InputValueDefinition",description:{kind:"StringValue",value:"Only for images.\nIf true, the image will not be compressed",block:!0},name:{kind:"Name",value:"noCompress"},type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},directives:[]}],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"File"}}}},directives:[]}]},{kind:"InputObjectTypeDefinition",description:{kind:"StringValue",value:"Information about uploaded file",block:!0},name:{kind:"Name",value:"FileUploadInfo"},directives:[],fields:[{kind:"InputValueDefinition",description:{kind:"StringValue",value:"Your file owner",block:!0},name:{kind:"Name",value:"owner"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"InputValueDefinition",description:{kind:"StringValue",value:"Voluntary name of category",block:!0},name:{kind:"Name",value:"category"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"InputValueDefinition",description:{kind:"StringValue",value:"Description of this file",block:!0},name:{kind:"Name",value:"description"},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"InputValueDefinition",description:{kind:"StringValue",value:"Voluntary metadata of this file (e.g. title, alt for images)",block:!0},name:{kind:"Name",value:"metaData"},type:{kind:"NamedType",name:{kind:"Name",value:"JSON"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"FileStorageQuery"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",description:{kind:"StringValue",value:"Returns Drivers list bundle",block:!0},name:{kind:"Name",value:"list"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"first"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"offset"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"after"},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"orderBy"},type:{kind:"ListType",type:{kind:"NamedType",name:{kind:"Name",value:"FilesOrderBy"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"filter"},type:{kind:"NamedType",name:{kind:"Name",value:"FilesListFilter"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"transform"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInput"}},directives:[]}],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FilesListConnection"}}},directives:[]},{kind:"FieldDefinition",description:{kind:"StringValue",value:"Returns single image",block:!0},name:{kind:"Name",value:"image"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"id"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"transform"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInput"}},directives:[]}],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Image"}}},directives:[]},{kind:"FieldDefinition",description:{kind:"StringValue",value:"Returns single file",block:!0},name:{kind:"Name",value:"file"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"id"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]}],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"File"}}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"FilesListFilter"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"owner"},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"category"},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"mimeType"},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeDefinition",description:{kind:"StringValue",value:"File adge bundle",block:!0},name:{kind:"Name",value:"FilesEdge"},interfaces:[{kind:"NamedType",name:{kind:"Name",value:"Edge"}}],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"node"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"File"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"cursor"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"InputObjectTypeDefinition",description:{kind:"StringValue",value:"Possible data to order list of files",block:!0},name:{kind:"Name",value:"FilesOrderBy"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"field"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FilesOrderField"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"direction"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"OrderDirection"}}},directives:[]}]},{kind:"EnumTypeDefinition",description:{kind:"StringValue",value:"Possible data to sort of files list",block:!0},name:{kind:"Name",value:"FilesOrderField"},directives:[],values:[{kind:"EnumValueDefinition",name:{kind:"Name",value:"category"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"mimeType"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"createdAt"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"updatedAt"},directives:[]}]},{kind:"EnumTypeDefinition",name:{kind:"Name",value:"FileType"},directives:[],values:[{kind:"EnumValueDefinition",name:{kind:"Name",value:"image"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"document"},directives:[]}]},{kind:"ObjectTypeDefinition",description:{kind:"StringValue",value:"Files list connection",block:!0},name:{kind:"Name",value:"FilesListConnection"},interfaces:[{kind:"NamedType",name:{kind:"Name",value:"Connection"}}],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"totalCount"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"pageInfo"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"PageInfo"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"edges"},arguments:[],type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NamedType",name:{kind:"Name",value:"FilesEdge"}}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"File"},interfaces:[{kind:"NamedType",name:{kind:"Name",value:"Node"}}],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"createdAt"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"DateTime"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"updatedAt"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"DateTime"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"owner"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"type"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileType"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"category"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"mimeType"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"url"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"description"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"metaData"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"JSON"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Image"},interfaces:[{kind:"NamedType",name:{kind:"Name",value:"Node"}}],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"createdAt"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"DateTime"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"updatedAt"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"DateTime"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"owner"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"type"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FileType"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"category"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"mimeType"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"url"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"description"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"metaData"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"JSON"}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"ImageTransformInput"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"resize"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInputResize"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"cover"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInputCover"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"contain"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInputContain"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"scaleToFit"},type:{kind:"NamedType",name:{kind:"Name",value:"ImageTransformInputScaleToFit"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"gaussian"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"blur"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"quality"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"greyscale"},type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"ImageTransformInputResize"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"width"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"height"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"ImageTransformInputCover"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"width"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"height"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"ImageTransformInputContain"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"width"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"height"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"ImageTransformInputScaleToFit"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"width"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"height"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Int"}}},directives:[]}]},{kind:"ScalarTypeDefinition",description:{kind:"StringValue",value:"A GraphQL `FileUpload` scalar as specified GraphQL multipart request specification: https://github.com/jaydenseric/graphql-multipart-request-spec#graphql-multipart-request-specification",block:!0},name:{kind:"Name",value:"FileUpload"},directives:[]}],loc:{start:0,end:3419}};n.loc.source={body:'\nextend type Query {\n  fileStorage: FileStorageQuery!\n}\n\nextend type Mutation {\n  fileStorage: FileStorageMutation!\n}\n\ntype FileStorageMutation {\n  """\n  Delete files by IDs\n  """\n  delete(ids: [ID!]!): Boolean\n  \n  """\n  Upload files\n  """\n  upload(\n    """\n    Array of files\n    For example `curl` request will be:\n    curl localhost:3001/graphql \\\n    -F operations=\'{ "query": "mutation($files: [FileUpload!]! $info: [FileUploadInfo!]!) { multipleUpload(files: $files info: $info) { id url } }", "variables": { "files": [null, null] }, "info": [{"owner": "xxxx-xxx-xxx", "category": "other"}, {"owner": "xxxx-xxx-xxx", "category": "other"}] }\' \\\n    -F map=\'{ "0": ["variables.files.0"], "1": ["variables.files.1"] }\' \\\n    -F 0=@b.txt \\\n    -F 1=@c.txt\n    """\n    files: [FileUpload!]!\n    info: [FileUploadInfo!]!\n    \n    """\n    Only for images.\n    If true, the image will not be compressed\n    """\n    noCompress: Boolean\n  ): [File!]\n}\n\n"""\nInformation about uploaded file\n"""\ninput FileUploadInfo {\n\n  """\n  Your file owner\n  """\n  owner: ID!\n\n  """\n  Voluntary name of category\n  """\n  category: String!\n\n  """\n  Description of this file\n  """\n  description: String\n\n  """\n  Voluntary metadata of this file (e.g. title, alt for images)\n  """\n  metaData: JSON\n}\n\ntype FileStorageQuery {\n  """\n  Returns Drivers list bundle\n  """\n  list(\n    first: Int\n    offset: Int\n    after: String\n    orderBy: [FilesOrderBy]\n    filter: FilesListFilter\n    transform: ImageTransformInput\n  ): FilesListConnection!\n\n  """\n  Returns single image\n  """\n  image(id: ID! transform: ImageTransformInput): Image!\n  \n  """\n  Returns single file\n  """\n  file(id: ID!): File!\n}\n\n\ninput FilesListFilter {\n  owner: ID\n  category: String\n  mimeType: String\n}\n\n"""\nFile adge bundle\n"""\ntype FilesEdge implements Edge {\n  node: File!\n  cursor: String!\n}\n\n"""\nPossible data to order list of files\n"""\ninput FilesOrderBy {\n  field: FilesOrderField!\n  direction: OrderDirection!\n}\n\n\n"""\nPossible data to sort of files list\n"""\nenum FilesOrderField {\n  category\n  mimeType\n  createdAt\n  updatedAt\n}\n\nenum FileType {\n  image\n  document\n}\n\n"""\nFiles list connection\n"""\ntype FilesListConnection implements Connection {\n  totalCount: Int!\n  pageInfo: PageInfo!\n  edges: [FilesEdge]!\n}\n\n\ntype File implements Node {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  owner: ID!\n  type: FileType!\n  category: String!\n  mimeType: String!\n  url: String!\n  description: String\n  metaData: JSON\n}\n\ntype Image implements Node {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  owner: ID!\n  type: FileType!\n  category: String!\n  mimeType: String!\n  url: String!\n  description: String\n  metaData: JSON\n}\n\ninput ImageTransformInput {\n  resize: ImageTransformInputResize\n  cover: ImageTransformInputCover\n  contain: ImageTransformInputContain\n  scaleToFit: ImageTransformInputScaleToFit\n  gaussian: Int\n  blur: Int\n  quality: Int\n  greyscale: Boolean\n}\n\ninput ImageTransformInputResize {\n  width: Int!\n  height: Int!\n}\n\ninput ImageTransformInputCover {\n  width: Int!\n  height: Int!\n}\n\ninput ImageTransformInputContain {\n  width: Int!\n  height: Int!\n}\n\ninput ImageTransformInputScaleToFit {\n  width: Int!\n  height: Int!\n}\n\n"""\nA GraphQL `FileUpload` scalar as specified GraphQL multipart request specification: https://github.com/jaydenseric/graphql-multipart-request-spec#graphql-multipart-request-specification\n"""\nscalar FileUpload',name:"GraphQL request",locationOffset:{line:1,column:1}};e.exports=n},function(e,i,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const t=n(35);n(36);const a=n(9),r=t.format.combine(t.format.metadata(),t.format.json(),t.format.timestamp({format:"YYYY-MM-DDTHH:mm:ssZZ"}),t.format.splat(),t.format.printf(e=>{const{timestamp:i,level:n,message:t,metadata:a}=e,r="{}"!==JSON.stringify(a)?a:null;return`${i} ${n}: ${t} ${r?JSON.stringify(r):""}`}));i.configureFileStorageLogger=e=>{const{logDir:i,logFilenamePattern:n}=e,o=n||a.LOG_FILENAME_FILES_STORAGE;return t.createLogger({level:"debug",format:r,transports:[new t.transports.DailyRotateFile({filename:`${i}/${o}`,level:"info",datePattern:a.LOG_DATE_PATTERNT,zippedArchive:!0,maxSize:a.LOG_MAZ_SIZE,maxFiles:a.LOG_MAZ_FILES}),new t.transports.DailyRotateFile({filename:`${i}/${a.LOG_FILENAME_ERRORS}`,level:"error",datePattern:a.LOG_DATE_PATTERNT,zippedArchive:!0,maxSize:a.LOG_MAZ_SIZE,maxFiles:a.LOG_MAZ_FILES}),new t.transports.DailyRotateFile({filename:`${i}/${a.LOG_FILENAME_DEBUG}`,level:"debug",datePattern:a.LOG_DATE_PATTERNT,zippedArchive:!0,maxSize:a.LOG_MAZ_SIZE,maxFiles:a.LOG_MAZ_FILES})]})},i.default=i.configureFileStorageLogger},function(e,i){e.exports=require("winston")},function(e,i){e.exports=require("winston-daily-rotate-file")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,