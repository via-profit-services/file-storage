
extend type Query {
  fileStorage: FileStorageQuery!
}

extend type Mutation {
  fileStorage: FileStorageMutation!
}

type FileStorageMutation {
  """
  Delete files by IDs
  """
  delete(ids: [ID!]!): Boolean
  
  """
  Upload files
  """
  upload(
    """
    Array of files
    For example `curl` request will be:
    curl localhost:3001/graphql \
    -F operations='{ "query": "mutation($files: [FileUpload!]! $info: [FileUploadInfo!]!) { multipleUpload(files: $files info: $info) { id url } }", "variables": { "files": [null, null] }, "info": [{"owner": "xxxx-xxx-xxx", "category": "other"}, {"owner": "xxxx-xxx-xxx", "category": "other"}] }' \
    -F map='{ "0": ["variables.files.0"], "1": ["variables.files.1"] }' \
    -F 0=@b.txt \
    -F 1=@c.txt
    """
    files: [FileUpload!]!
    info: [FileUploadInfo!]!
    
    """
    Only for images.
    If true, the image will not be compressed
    """
    noCompress: Boolean
  ): [File!]
}

"""
Information about uploaded file
"""
input FileUploadInfo {

  """
  Your file owner
  """
  owner: ID!

  """
  Voluntary name of category
  """
  category: String!

  """
  Description of this file
  """
  description: String

  """
  Voluntary metadata of this file (e.g. title, alt for images)
  """
  metaData: JSON
}

type FileStorageQuery {
  """
  Returns Drivers list bundle
  """
  list(
    first: Int
    offset: Int
    after: String
    orderBy: [FilesOrderBy]
    filter: FilesListFilter
    transform: ImageTransformInput
  ): FilesListConnection!

  """
  Returns single image
  """
  image(id: ID! transform: ImageTransformInput): Image!
  
  """
  Returns single file
  """
  file(id: ID!): File!
}


input FilesListFilter {
  owner: ID
  category: String
  mimeType: String
}

"""
File adge bundle
"""
type FilesEdge implements Edge {
  node: File!
  cursor: String!
}

"""
Possible data to order list of files
"""
input FilesOrderBy {
  field: FilesOrderField!
  direction: OrderDirection!
}


"""
Possible data to sort of files list
"""
enum FilesOrderField {
  category
  mimeType
  createdAt
  updatedAt
}

enum FileType {
  image
  document
}

"""
Files list connection
"""
type FilesListConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [FilesEdge]!
}

interface FileNode {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: ID!
  type: FileType!
  category: String!
  mimeType: String!
  url: URL!
  description: String
  metaData: JSON
}

type File implements FileNode & Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: ID!
  type: FileType!
  category: String!
  mimeType: String!
  url: URL!
  description: String
  metaData: JSON
}

type Image implements FileNode & Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: ID!
  type: FileType!
  category: String!
  mimeType: String!
  url: URL!
  description: String
  metaData: JSON
}

input ImageTransformInput {
  resize: ImageTransformInputResize
  cover: ImageTransformInputCover
  contain: ImageTransformInputContain
  scaleToFit: ImageTransformInputScaleToFit
  gaussian: Int
  blur: Int
  quality: Int
  greyscale: Boolean
}

input ImageTransformInputResize {
  width: Int!
  height: Int!
}

input ImageTransformInputCover {
  width: Int!
  height: Int!
}

input ImageTransformInputContain {
  width: Int!
  height: Int!
}

input ImageTransformInputScaleToFit {
  width: Int!
  height: Int!
}

"""
A GraphQL `FileUpload` scalar as specified GraphQL multipart request specification: https://github.com/jaydenseric/graphql-multipart-request-spec#graphql-multipart-request-specification
"""
scalar FileUpload