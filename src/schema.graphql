
extend type Query {
  fileStorage: FileStorageQuery!
}

extend type Mutation {
  fileStorage: FileStorageMutation!
}

type FileStorageMutation {
  """
  Delete files by IDs
  """
  delete(ids: [ID!] owners: [ID!]): FileStorageDeleteResponse!
  
  """
  Upload files
  """
  upload(
    """
    GraphQL multipart request specification: https://github.com/jaydenseric/graphql-multipart-request-spec#graphql-multipart-request-specification
    For example `curl` request will be:
    curl --request POST \
      --url http://localhost:8000/graphql \
      --form 'operations={ "query": "mutation uploadFiles($files: [FileUpload!]!, $info: [FileUploadInfo!]!) {fileStorage {upload(files: $files info: $info) {id url}}}", "variables": { "files": [ null ], "info": [ { "owner": "8cd48386-ff44-4d67-b1a6-0d7b0f94aec4", "category": "Avatar", "description": "" } ] } }' \
      --form 'map={ "0": ["variables.files.0"] }' \
      --form 0=@/path/to/file.jpg
    """
    files: [FileUpload!]!
    info: [FileUploadInfo!]!

  ): [File!]!

  """
  Upload the file temporarily. When the specified time limit (TTL) expires the file will be deleted
  """
  uploadTemporary (
    files: [FileUpload!]!
    info: [FileUploadInfo!]!
  ): [TemporaryFile!]

  """
  Move your data from temporary directory into the permanent state
  """
  applyTemporary (
    ids: [ID!]!
    info: [FileUpdateInfo!]
  ): [File!]

  """
  Update existings file info
  """
  update (
    info: [FileUpdateInfo!]!
  ): [File!]

  clearCache: Void
}

type FileStorageDeleteResponse {
  deletedIDs: [ID!]!
  query: Query!
}

"""
Information about uploaded file
"""
input FileUploadInfo {
  id: ID

  """
  Your file owner
  """
  owner: ID!

  """
  Voluntary name of category
  """
  category: FileCategory!

  """
  Description of this file
  """
  description: String!

  """
  Voluntary metadata of this file (e.g. title, alt for images)
  """
  metaData: JSON
}

input FileUpdateInfo {
  id: ID!

  """
  Your file owner
  """
  owner: ID

  """
  Voluntary name of category
  """
  category: FileCategory

  """
  Description of this file
  """
  description: String

  """
  Voluntary metadata of this file (e.g. title, alt for images)
  """
  metaData: JSON

  """
  Type of the file
  """
  type: FileType
}

type FileStorageQuery {
  """
  Returns Files list bundle
  """
  list(
    first: Int
    offset: Int
    after: String
    orderBy: [FilesOrderBy!]
    search: [FilesListSearch!]
    filter: FilesListFilter
    between: FilesListBetween
  ): FilesListConnection!

  """
  Returns single file
  """
  file(id: ID!): File
}


"""
Files search filter
"""
input FilesListSearch {
  field: FilesListSearchField!

  """
  Search query string
  """
  query: String!
}

"""
Possible fields to search files
"""
enum FilesListSearchField {
  description
}


"""
Possible data to between list of files
"""
input FilesListBetween {
  updatedAt: BetweenDateTime
  createdAt: BetweenDateTime
}

input FilesListFilter {
  id: [ID!]
  owner: [ID!]
  category: [FileCategory!]
  mimeType: [String!]
  type: [FileType!]
}

"""
File adge bundle
"""
type FilesEdge implements Edge {
  node: File!
  cursor: String!
}

"""
Possible data to order list of files
"""
input FilesOrderBy {
  field: FilesOrderField!
  direction: OrderDirection!
}


"""
Possible data to sort of files list
"""
enum FilesOrderField {
  category
  mimeType
  createdAt
  updatedAt
}

enum FileType {
  image
  document
  template
}

"""
Files list connection
"""
type FilesListConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [FilesEdge!]!
}

interface FileNode {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: ID!
  type: FileType!
  category: FileCategory!
  mimeType: String!
  url: URL!
  description: String!
  metaData: JSON
}


type File implements FileNode & Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: ID!
  type: FileType!
  category: FileCategory!
  mimeType: String!
  url: URL!
  transform(
    resize: ImageTransformInputResize
    cover: ImageTransformInputCover
    contain: ImageTransformInputContain
    scaleToFit: ImageTransformInputScaleToFit
    crop: ImageTransformInputCrop
    gaussian: Int
    blur: Int
    quality: Int
    greyscale: Boolean
  ): TransformedFile
  description: String!
  metaData: JSON
}

type TransformedFile implements FileNode & Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: ID!
  type: FileType!
  category: FileCategory!
  mimeType: String!
  url: URL!
  reference: File!
  description: String!
  metaData: JSON
}


type TemporaryFile implements FileNode & Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  expiredAt: DateTime!
  owner: ID!
  type: FileType!
  category: FileCategory!
  mimeType: String!
  url: URL!
  description: String!
  metaData: JSON
}


input ImageTransformInputResize {
  w: Int!
  h: Int!
}

input ImageTransformInputCover {
  w: Int!
  h: Int!
}

input ImageTransformInputContain {
  w: Int!
  h: Int!
}

input ImageTransformInputScaleToFit {
  w: Int!
  h: Int!
}

input ImageTransformInputCrop {
  w: Int!
  h: Int!
  x: Int!
  y: Int!
}

"""
A GraphQL `FileUpload` scalar as specified GraphQL multipart request specification: https://github.com/jaydenseric/graphql-multipart-request-spec#graphql-multipart-request-specification
"""
scalar FileUpload